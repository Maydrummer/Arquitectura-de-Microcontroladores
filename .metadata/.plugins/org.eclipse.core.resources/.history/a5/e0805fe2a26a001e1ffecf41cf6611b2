.syntax unified
.thumb
.text

@ Simbolos exportados --> No olvidar de colocar los nombres de las funciones aqu√≠

.global asm_medDif
.global asm_medDif_DSP
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@                                EJERCICIO Diferencia media con ASM normal
@ void asm_medDif(int8_t * e, int8_t *x, int8_t *y, uint16_t longitud);
@ Parametros recibidos:
@   r0: direccion de memoria resultado
@   r1: direccion de memoria vectorX
@   r2: direccion de memoria vectorY
@   r3: longitud
@
@ Valor de retorno:
@   NULL, solo se modifica el vectorOUT
@
.thumb_func
    asm_medDif:
    	push {r4, r5}  //guardamos registros r4 y r5 en el stack
    	loop1:
    		subs r3, #1 //actualizamos indice i restando 1 en cada iteracion
    		ldrsb r4,[r1,r3] //Cargamos a r4 el valor[i] del vectorX
    						 // no necesitamos un LSL por que estamos accediendo datos de tamano byte directamente
    						 // r4= *(r1+r3), usamos ldrsb por que son enteros signados de 8 bits
    		ldrsb r5,[r2,r3] //Cargamos a r5 el valor[i] del vectorY
    						 // no necesitamos un LSL por que estamos accediendo a datos de tamano byte directamente
    						 // r4= *(r2+r3), usamos ldrsb por que son enteros signados de 8 bits
			sub r4,r5            // restamos r4= r4-r5
			asr r4, #1           // Se usa desplazamiento aritmetico a la derecha para no perder el signo
								//Lo que se hace es introducir unos por la izquierda
								//Provocando una division para 2
			strb r4,[r0,r3] //Almacenamos el resultado en R0 que apunta a la direccion de memoria del vector de salida


    		bne loop1  // Comparamos el flag Z del APSR de la instruccion subs r3,#1
    		pop {r4,r5} //Recuperamos los datos del stack antes de volver al main
    	exit1:
        	bx lr  //Salto incondicional a LR



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@                                EJERCICIO Diferencia media con ASM e intrucciones SIMD
@ void asm_medDif_SIMD(int8_t * e, int8_t *x, int8_t *y, uint16_t longitud);
@ Parametros recibidos:
@   r0: direccion de memoria resultado
@   r1: direccion de memoria vectorX
@   r2: direccion de memoria vectorY
@   r3: longitud
@
@ Valor de retorno:
@   NULL, solo se modifica el vectorOUT
@
.thumb_func
    asm_medDif_DSP:
    	push {r4, r5}
    	lsr r3, #2 //Division para 4 ya que son valores de 8 bits y guardaremos elementos de 4 en 4 por iteracion
    			  // al registro de 32 bits
    	loop2:
    		subs r3, #1 //restamos en uno el indice
    		ldr r4,[r1,r3, LSL #2] //a cada indice hacemos una multiplicacion por 4 para que almacene
    							   // a partir del indice i*4
    		ldr r5,[r2,r3, LSL #2] //Ejemplo si el indice es i=2 entonces en este loop accedemos al
    								// elemento 8 y guardamos del elemento 8 al 12
			shsub8 r4,r4,r5        // esta instruccion es basicamente r4=(r4-r5)/2
			str r4,[r0,r3, LSL #2] //Almacenamos valor[i] del vector resultado en r0[i]


    		bne loop1
    		pop {r4,r5}
    	exit2:
        	bx lr



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@                                EJERCICIO Promedio con ASM normal
@ void asm_promSIMD(uint16_t *vectorOut,uint16_t *vectorX,uint16_t *vectorY,uint16_t longitud);
@ Parametros recibidos:
@   r0: direccion de memoria resultado
@   r1: direccion de memoria vectorX
@   r2: direccion de memoria vectorY
@   r3: longitud
@
@ Valor de retorno:
@   NULL, solo se modifica el vectorOUT
@
.thumb_func
    asm_promSIMD:
    	push {r4, r5}
    	lsr r3,#1  //Para no acceder a una posicion de memoria invalida, divido para dos
    	loop12:
    		subs r3, #1 //actualizamos indice i, la mejor forma de iterar todos los indices del Vector
    		ldr r4,[r1,r3, LSL #2] //Cargamos a r4 el valor[i] del vectorX pero con instruccion de 32 bits
    		ldr r5,[r2,r3, LSL #2] //Cargamos a r5 el valor[i] del vectory
			uhadd16 r5,r5,r4   //Reemplaza a las dos instrucciones de sumar y luego dividir
			str r5,[r0,r3, LSL #2] //Almacenamos valor[i] del vector resultado en r0[i]


    		bne loop12
    		pop {r4,r5}
    	exit12:
        	bx lr


