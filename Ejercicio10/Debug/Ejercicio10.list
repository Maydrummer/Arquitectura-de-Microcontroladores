
Ejercicio10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003194  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08003364  08003364  00013364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800345c  0800345c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800345c  0800345c  0001345c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003464  08003464  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003464  08003464  00013464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003468  08003468  00013468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800346c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000068  080034d4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  080034d4  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000086c1  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000177d  00000000  00000000  0002879c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000760  00000000  00000000  00029f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000599  00000000  00000000  0002a680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021b42  00000000  00000000  0002ac19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009e0b  00000000  00000000  0004c75b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9d2f  00000000  00000000  00056566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002644  00000000  00000000  00120298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000af  00000000  00000000  001228dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800334c 	.word	0x0800334c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	0800334c 	.word	0x0800334c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	f5ad 4d80 	sub.w	sp, sp, #16384	; 0x4000
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	DWT->CTRL |= 1 << DWT_CTRL_CYCCNTENA_Pos;
 80005b6:	4b22      	ldr	r3, [pc, #136]	; (8000640 <main+0x94>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a21      	ldr	r2, [pc, #132]	; (8000640 <main+0x94>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	6013      	str	r3, [r2, #0]

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  HAL_Init();
 80005c2:	f000 fb41 	bl	8000c48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f83d 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 f8d3 	bl	8000774 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ce:	f000 f8a7 	bl	8000720 <MX_USART2_UART_Init>
  DWT->CYCCNT = 0;
  uint32_t Ciclos_S= 0;
  asm_productoescalar32(vectorEntrada_S, vectorSalida_S, tamano, escalar2);
  Ciclos_S= DWT->CYCCNT;
  */
  int16_t muestras_in[tamano]={0};
 80005d2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80005d6:	f103 0308 	add.w	r3, r3, #8
 80005da:	3b04      	subs	r3, #4
 80005dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f002 f811 	bl	800260a <memset>
  int16_t muestras_out[tamano]={0};
 80005e8:	f107 0308 	add.w	r3, r7, #8
 80005ec:	3b04      	subs	r3, #4
 80005ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005f2:	2100      	movs	r1, #0
 80005f4:	4618      	mov	r0, r3
 80005f6:	f002 f808 	bl	800260a <memset>
  uint32_t posicion_eco=882;
 80005fa:	f240 3372 	movw	r3, #882	; 0x372
 80005fe:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8000602:	f102 0204 	add.w	r2, r2, #4
 8000606:	6013      	str	r3, [r2, #0]
  generaVector(muestras_in, tamano);
 8000608:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800060c:	f103 0308 	add.w	r3, r3, #8
 8000610:	3b04      	subs	r3, #4
 8000612:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000616:	4618      	mov	r0, r3
 8000618:	f000 f91a 	bl	8000850 <generaVector>
  eco_vector(muestras_in, muestras_out, posicion_eco, tamano);
 800061c:	f107 0108 	add.w	r1, r7, #8
 8000620:	3904      	subs	r1, #4
 8000622:	f507 5000 	add.w	r0, r7, #8192	; 0x2000
 8000626:	f100 0008 	add.w	r0, r0, #8
 800062a:	3804      	subs	r0, #4
 800062c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000630:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8000634:	f102 0204 	add.w	r2, r2, #4
 8000638:	6812      	ldr	r2, [r2, #0]
 800063a:	f000 f928 	bl	800088e <eco_vector>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063e:	e7fe      	b.n	800063e <main+0x92>
 8000640:	e0001000 	.word	0xe0001000

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	2234      	movs	r2, #52	; 0x34
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f001 ffd9 	bl	800260a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 0308 	add.w	r3, r7, #8
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b2a      	ldr	r3, [pc, #168]	; (8000718 <SystemClock_Config+0xd4>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	4a29      	ldr	r2, [pc, #164]	; (8000718 <SystemClock_Config+0xd4>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	; 0x40
 8000678:	4b27      	ldr	r3, [pc, #156]	; (8000718 <SystemClock_Config+0xd4>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000684:	2300      	movs	r3, #0
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	4b24      	ldr	r3, [pc, #144]	; (800071c <SystemClock_Config+0xd8>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000690:	4a22      	ldr	r2, [pc, #136]	; (800071c <SystemClock_Config+0xd8>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b20      	ldr	r3, [pc, #128]	; (800071c <SystemClock_Config+0xd8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a4:	2302      	movs	r3, #2
 80006a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ac:	2310      	movs	r3, #16
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b0:	2302      	movs	r3, #2
 80006b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b4:	2300      	movs	r3, #0
 80006b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006b8:	2310      	movs	r3, #16
 80006ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006bc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006c2:	2304      	movs	r3, #4
 80006c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	f107 031c 	add.w	r3, r7, #28
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 f908 	bl	80018e8 <HAL_RCC_OscConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006de:	f000 f912 	bl	8000906 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	230f      	movs	r3, #15
 80006e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e6:	2302      	movs	r3, #2
 80006e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f8:	f107 0308 	add.w	r3, r7, #8
 80006fc:	2102      	movs	r1, #2
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 fda8 	bl	8001254 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800070a:	f000 f8fc 	bl	8000906 <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3750      	adds	r7, #80	; 0x50
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000726:	4a12      	ldr	r2, [pc, #72]	; (8000770 <MX_USART2_UART_Init+0x50>)
 8000728:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_USART2_UART_Init+0x4c>)
 800072c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000730:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_USART2_UART_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_USART2_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000758:	f001 fb64 	bl	8001e24 <HAL_UART_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000762:	f000 f8d0 	bl	8000906 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000084 	.word	0x20000084
 8000770:	40004400 	.word	0x40004400

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	; 0x28
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b2d      	ldr	r3, [pc, #180]	; (8000844 <MX_GPIO_Init+0xd0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a2c      	ldr	r2, [pc, #176]	; (8000844 <MX_GPIO_Init+0xd0>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b2a      	ldr	r3, [pc, #168]	; (8000844 <MX_GPIO_Init+0xd0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b26      	ldr	r3, [pc, #152]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a25      	ldr	r2, [pc, #148]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b23      	ldr	r3, [pc, #140]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a1e      	ldr	r2, [pc, #120]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a17      	ldr	r2, [pc, #92]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2120      	movs	r1, #32
 80007fe:	4812      	ldr	r0, [pc, #72]	; (8000848 <MX_GPIO_Init+0xd4>)
 8000800:	f000 fd0e 	bl	8001220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800080a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	480c      	ldr	r0, [pc, #48]	; (800084c <MX_GPIO_Init+0xd8>)
 800081c:	f000 fb6c 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000820:	2320      	movs	r3, #32
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	4804      	ldr	r0, [pc, #16]	; (8000848 <MX_GPIO_Init+0xd4>)
 8000838:	f000 fb5e 	bl	8000ef8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800083c:	bf00      	nop
 800083e:	3728      	adds	r7, #40	; 0x28
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40023800 	.word	0x40023800
 8000848:	40020000 	.word	0x40020000
 800084c:	40020800 	.word	0x40020800

08000850 <generaVector>:

}


void generaVector(int16_t *vectorIn, uint32_t longitud)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
 for(uint32_t i = longitud; i > 0; i --)
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	e00e      	b.n	800087e <generaVector+0x2e>
	 {
	 vectorIn[i-1] = rand();
 8000860:	f001 fda2 	bl	80023a8 <rand>
 8000864:	4601      	mov	r1, r0
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800086c:	3b01      	subs	r3, #1
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	4413      	add	r3, r2
 8000874:	b20a      	sxth	r2, r1
 8000876:	801a      	strh	r2, [r3, #0]
 for(uint32_t i = longitud; i > 0; i --)
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	3b01      	subs	r3, #1
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d1ed      	bne.n	8000860 <generaVector+0x10>
	 }
}
 8000884:	bf00      	nop
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <eco_vector>:

void eco_vector(int16_t *vectorIn,int16_t *vectorOut, uint32_t posicion, uint32_t longitud)
{
 800088e:	b480      	push	{r7}
 8000890:	b087      	sub	sp, #28
 8000892:	af00      	add	r7, sp, #0
 8000894:	60f8      	str	r0, [r7, #12]
 8000896:	60b9      	str	r1, [r7, #8]
 8000898:	607a      	str	r2, [r7, #4]
 800089a:	603b      	str	r3, [r7, #0]
	for (uint32_t i=0; i < posicion; i++)
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
 80008a0:	e00d      	b.n	80008be <eco_vector+0x30>
	{
		vectorOut[i]=vectorIn[i];
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	68fa      	ldr	r2, [r7, #12]
 80008a8:	441a      	add	r2, r3
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	68b9      	ldr	r1, [r7, #8]
 80008b0:	440b      	add	r3, r1
 80008b2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80008b6:	801a      	strh	r2, [r3, #0]
	for (uint32_t i=0; i < posicion; i++)
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	3301      	adds	r3, #1
 80008bc:	617b      	str	r3, [r7, #20]
 80008be:	697a      	ldr	r2, [r7, #20]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d3ed      	bcc.n	80008a2 <eco_vector+0x14>
	}
	for(uint32_t i=posicion; i< longitud;i++)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	613b      	str	r3, [r7, #16]
 80008ca:	e011      	b.n	80008f0 <eco_vector+0x62>
	{
		vectorOut[i]=vectorIn[i]/2;
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	68fa      	ldr	r2, [r7, #12]
 80008d2:	4413      	add	r3, r2
 80008d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008d8:	693a      	ldr	r2, [r7, #16]
 80008da:	0052      	lsls	r2, r2, #1
 80008dc:	68b9      	ldr	r1, [r7, #8]
 80008de:	440a      	add	r2, r1
 80008e0:	0fd9      	lsrs	r1, r3, #31
 80008e2:	440b      	add	r3, r1
 80008e4:	105b      	asrs	r3, r3, #1
 80008e6:	b21b      	sxth	r3, r3
 80008e8:	8013      	strh	r3, [r2, #0]
	for(uint32_t i=posicion; i< longitud;i++)
 80008ea:	693b      	ldr	r3, [r7, #16]
 80008ec:	3301      	adds	r3, #1
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693a      	ldr	r2, [r7, #16]
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d3e9      	bcc.n	80008cc <eco_vector+0x3e>
	}
}
 80008f8:	bf00      	nop
 80008fa:	bf00      	nop
 80008fc:	371c      	adds	r7, #28
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800090a:	b672      	cpsid	i
}
 800090c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090e:	e7fe      	b.n	800090e <Error_Handler+0x8>

08000910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <HAL_MspInit+0x4c>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091e:	4a0f      	ldr	r2, [pc, #60]	; (800095c <HAL_MspInit+0x4c>)
 8000920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000924:	6453      	str	r3, [r2, #68]	; 0x44
 8000926:	4b0d      	ldr	r3, [pc, #52]	; (800095c <HAL_MspInit+0x4c>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <HAL_MspInit+0x4c>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093a:	4a08      	ldr	r2, [pc, #32]	; (800095c <HAL_MspInit+0x4c>)
 800093c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000940:	6413      	str	r3, [r2, #64]	; 0x40
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_MspInit+0x4c>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800094e:	2007      	movs	r0, #7
 8000950:	f000 fa9e 	bl	8000e90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40023800 	.word	0x40023800

08000960 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08a      	sub	sp, #40	; 0x28
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a19      	ldr	r2, [pc, #100]	; (80009e4 <HAL_UART_MspInit+0x84>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d12b      	bne.n	80009da <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <HAL_UART_MspInit+0x88>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	4a17      	ldr	r2, [pc, #92]	; (80009e8 <HAL_UART_MspInit+0x88>)
 800098c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000990:	6413      	str	r3, [r2, #64]	; 0x40
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <HAL_UART_MspInit+0x88>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <HAL_UART_MspInit+0x88>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a10      	ldr	r2, [pc, #64]	; (80009e8 <HAL_UART_MspInit+0x88>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <HAL_UART_MspInit+0x88>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009ba:	230c      	movs	r3, #12
 80009bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c6:	2303      	movs	r3, #3
 80009c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ca:	2307      	movs	r3, #7
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	4619      	mov	r1, r3
 80009d4:	4805      	ldr	r0, [pc, #20]	; (80009ec <HAL_UART_MspInit+0x8c>)
 80009d6:	f000 fa8f 	bl	8000ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009da:	bf00      	nop
 80009dc:	3728      	adds	r7, #40	; 0x28
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40004400 	.word	0x40004400
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40020000 	.word	0x40020000

080009f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <NMI_Handler+0x4>

080009f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <HardFault_Handler+0x4>

080009fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <MemManage_Handler+0x4>

08000a02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <BusFault_Handler+0x4>

08000a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <UsageFault_Handler+0x4>

08000a0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a3c:	f000 f956 	bl	8000cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return 1;
 8000a48:	2301      	movs	r3, #1
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <_kill>:

int _kill(int pid, int sig)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000a5e:	f001 fe23 	bl	80026a8 <__errno>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2216      	movs	r2, #22
 8000a66:	601a      	str	r2, [r3, #0]
  return -1;
 8000a68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <_exit>:

void _exit (int status)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f7ff ffe7 	bl	8000a54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000a86:	e7fe      	b.n	8000a86 <_exit+0x12>

08000a88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	e00a      	b.n	8000ab0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a9a:	f3af 8000 	nop.w
 8000a9e:	4601      	mov	r1, r0
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	1c5a      	adds	r2, r3, #1
 8000aa4:	60ba      	str	r2, [r7, #8]
 8000aa6:	b2ca      	uxtb	r2, r1
 8000aa8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	3301      	adds	r3, #1
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	697a      	ldr	r2, [r7, #20]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	dbf0      	blt.n	8000a9a <_read+0x12>
  }

  return len;
 8000ab8:	687b      	ldr	r3, [r7, #4]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b086      	sub	sp, #24
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	60f8      	str	r0, [r7, #12]
 8000aca:	60b9      	str	r1, [r7, #8]
 8000acc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
 8000ad2:	e009      	b.n	8000ae8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	1c5a      	adds	r2, r3, #1
 8000ad8:	60ba      	str	r2, [r7, #8]
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	697a      	ldr	r2, [r7, #20]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	dbf1      	blt.n	8000ad4 <_write+0x12>
  }
  return len;
 8000af0:	687b      	ldr	r3, [r7, #4]
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <_close>:

int _close(int file)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b12:	b480      	push	{r7}
 8000b14:	b083      	sub	sp, #12
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
 8000b1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b22:	605a      	str	r2, [r3, #4]
  return 0;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <_isatty>:

int _isatty(int file)
{
 8000b32:	b480      	push	{r7}
 8000b34:	b083      	sub	sp, #12
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b3a:	2301      	movs	r3, #1
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3714      	adds	r7, #20
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
	...

08000b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b6c:	4a14      	ldr	r2, [pc, #80]	; (8000bc0 <_sbrk+0x5c>)
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <_sbrk+0x60>)
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b78:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d102      	bne.n	8000b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <_sbrk+0x64>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <_sbrk+0x68>)
 8000b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <_sbrk+0x64>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d207      	bcs.n	8000ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b94:	f001 fd88 	bl	80026a8 <__errno>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba2:	e009      	b.n	8000bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000baa:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <_sbrk+0x64>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <_sbrk+0x64>)
 8000bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20020000 	.word	0x20020000
 8000bc4:	00000400 	.word	0x00000400
 8000bc8:	200000c8 	.word	0x200000c8
 8000bcc:	20000220 	.word	0x20000220

08000bd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <SystemInit+0x20>)
 8000bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <SystemInit+0x20>)
 8000bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bf8:	480d      	ldr	r0, [pc, #52]	; (8000c30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bfa:	490e      	ldr	r1, [pc, #56]	; (8000c34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bfc:	4a0e      	ldr	r2, [pc, #56]	; (8000c38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c00:	e002      	b.n	8000c08 <LoopCopyDataInit>

08000c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c06:	3304      	adds	r3, #4

08000c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c0c:	d3f9      	bcc.n	8000c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0e:	4a0b      	ldr	r2, [pc, #44]	; (8000c3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c10:	4c0b      	ldr	r4, [pc, #44]	; (8000c40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c14:	e001      	b.n	8000c1a <LoopFillZerobss>

08000c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c18:	3204      	adds	r2, #4

08000c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c1c:	d3fb      	bcc.n	8000c16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c1e:	f7ff ffd7 	bl	8000bd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c22:	f001 fd47 	bl	80026b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c26:	f7ff fcc1 	bl	80005ac <main>
  bx  lr    
 8000c2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c34:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c38:	0800346c 	.word	0x0800346c
  ldr r2, =_sbss
 8000c3c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c40:	2000021c 	.word	0x2000021c

08000c44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c44:	e7fe      	b.n	8000c44 <ADC_IRQHandler>
	...

08000c48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0d      	ldr	r2, [pc, #52]	; (8000c88 <HAL_Init+0x40>)
 8000c52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c58:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <HAL_Init+0x40>)
 8000c5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <HAL_Init+0x40>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a07      	ldr	r2, [pc, #28]	; (8000c88 <HAL_Init+0x40>)
 8000c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c70:	2003      	movs	r0, #3
 8000c72:	f000 f90d 	bl	8000e90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c76:	2000      	movs	r0, #0
 8000c78:	f000 f808 	bl	8000c8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c7c:	f7ff fe48 	bl	8000910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40023c00 	.word	0x40023c00

08000c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_InitTick+0x54>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_InitTick+0x58>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 f917 	bl	8000ede <HAL_SYSTICK_Config>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e00e      	b.n	8000cd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2b0f      	cmp	r3, #15
 8000cbe:	d80a      	bhi.n	8000cd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc8:	f000 f8ed 	bl	8000ea6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ccc:	4a06      	ldr	r2, [pc, #24]	; (8000ce8 <HAL_InitTick+0x5c>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e000      	b.n	8000cd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	20000004 	.word	0x20000004

08000cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_IncTick+0x20>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_IncTick+0x24>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <HAL_IncTick+0x24>)
 8000cfe:	6013      	str	r3, [r2, #0]
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	200000cc 	.word	0x200000cc

08000d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return uwTick;
 8000d18:	4b03      	ldr	r3, [pc, #12]	; (8000d28 <HAL_GetTick+0x14>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	200000cc 	.word	0x200000cc

08000d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5e:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	60d3      	str	r3, [r2, #12]
}
 8000d64:	bf00      	nop
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <__NVIC_GetPriorityGrouping+0x18>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	0a1b      	lsrs	r3, r3, #8
 8000d7e:	f003 0307 	and.w	r3, r3, #7
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	6039      	str	r1, [r7, #0]
 8000d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	db0a      	blt.n	8000dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	490c      	ldr	r1, [pc, #48]	; (8000ddc <__NVIC_SetPriority+0x4c>)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	0112      	lsls	r2, r2, #4
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	440b      	add	r3, r1
 8000db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db8:	e00a      	b.n	8000dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4908      	ldr	r1, [pc, #32]	; (8000de0 <__NVIC_SetPriority+0x50>)
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	f003 030f 	and.w	r3, r3, #15
 8000dc6:	3b04      	subs	r3, #4
 8000dc8:	0112      	lsls	r2, r2, #4
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	440b      	add	r3, r1
 8000dce:	761a      	strb	r2, [r3, #24]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000e100 	.word	0xe000e100
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b089      	sub	sp, #36	; 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	f1c3 0307 	rsb	r3, r3, #7
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	bf28      	it	cs
 8000e02:	2304      	movcs	r3, #4
 8000e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3304      	adds	r3, #4
 8000e0a:	2b06      	cmp	r3, #6
 8000e0c:	d902      	bls.n	8000e14 <NVIC_EncodePriority+0x30>
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3b03      	subs	r3, #3
 8000e12:	e000      	b.n	8000e16 <NVIC_EncodePriority+0x32>
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	f04f 32ff 	mov.w	r2, #4294967295
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43da      	mvns	r2, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	401a      	ands	r2, r3
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	fa01 f303 	lsl.w	r3, r1, r3
 8000e36:	43d9      	mvns	r1, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	4313      	orrs	r3, r2
         );
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3724      	adds	r7, #36	; 0x24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
	...

08000e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e5c:	d301      	bcc.n	8000e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e00f      	b.n	8000e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e62:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <SysTick_Config+0x40>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e6a:	210f      	movs	r1, #15
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e70:	f7ff ff8e 	bl	8000d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <SysTick_Config+0x40>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7a:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <SysTick_Config+0x40>)
 8000e7c:	2207      	movs	r2, #7
 8000e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	e000e010 	.word	0xe000e010

08000e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff ff47 	bl	8000d2c <__NVIC_SetPriorityGrouping>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b086      	sub	sp, #24
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	4603      	mov	r3, r0
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
 8000eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb8:	f7ff ff5c 	bl	8000d74 <__NVIC_GetPriorityGrouping>
 8000ebc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	68b9      	ldr	r1, [r7, #8]
 8000ec2:	6978      	ldr	r0, [r7, #20]
 8000ec4:	f7ff ff8e 	bl	8000de4 <NVIC_EncodePriority>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ece:	4611      	mov	r1, r2
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff5d 	bl	8000d90 <__NVIC_SetPriority>
}
 8000ed6:	bf00      	nop
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ffb0 	bl	8000e4c <SysTick_Config>
 8000eec:	4603      	mov	r3, r0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	; 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
 8000f12:	e165      	b.n	80011e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f14:	2201      	movs	r2, #1
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	f040 8154 	bne.w	80011da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d005      	beq.n	8000f4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d130      	bne.n	8000fac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	68da      	ldr	r2, [r3, #12]
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f80:	2201      	movs	r2, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	091b      	lsrs	r3, r3, #4
 8000f96:	f003 0201 	and.w	r2, r3, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	2b03      	cmp	r3, #3
 8000fb6:	d017      	beq.n	8000fe8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d123      	bne.n	800103c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	08da      	lsrs	r2, r3, #3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3208      	adds	r2, #8
 8000ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	f003 0307 	and.w	r3, r3, #7
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	220f      	movs	r2, #15
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	691a      	ldr	r2, [r3, #16]
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	08da      	lsrs	r2, r3, #3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3208      	adds	r2, #8
 8001036:	69b9      	ldr	r1, [r7, #24]
 8001038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2203      	movs	r2, #3
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0203 	and.w	r2, r3, #3
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001078:	2b00      	cmp	r3, #0
 800107a:	f000 80ae 	beq.w	80011da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	4b5d      	ldr	r3, [pc, #372]	; (80011f8 <HAL_GPIO_Init+0x300>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	4a5c      	ldr	r2, [pc, #368]	; (80011f8 <HAL_GPIO_Init+0x300>)
 8001088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108c:	6453      	str	r3, [r2, #68]	; 0x44
 800108e:	4b5a      	ldr	r3, [pc, #360]	; (80011f8 <HAL_GPIO_Init+0x300>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800109a:	4a58      	ldr	r2, [pc, #352]	; (80011fc <HAL_GPIO_Init+0x304>)
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	089b      	lsrs	r3, r3, #2
 80010a0:	3302      	adds	r3, #2
 80010a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f003 0303 	and.w	r3, r3, #3
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	220f      	movs	r2, #15
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4f      	ldr	r2, [pc, #316]	; (8001200 <HAL_GPIO_Init+0x308>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d025      	beq.n	8001112 <HAL_GPIO_Init+0x21a>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4e      	ldr	r2, [pc, #312]	; (8001204 <HAL_GPIO_Init+0x30c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d01f      	beq.n	800110e <HAL_GPIO_Init+0x216>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4d      	ldr	r2, [pc, #308]	; (8001208 <HAL_GPIO_Init+0x310>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d019      	beq.n	800110a <HAL_GPIO_Init+0x212>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4c      	ldr	r2, [pc, #304]	; (800120c <HAL_GPIO_Init+0x314>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d013      	beq.n	8001106 <HAL_GPIO_Init+0x20e>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4b      	ldr	r2, [pc, #300]	; (8001210 <HAL_GPIO_Init+0x318>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d00d      	beq.n	8001102 <HAL_GPIO_Init+0x20a>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4a      	ldr	r2, [pc, #296]	; (8001214 <HAL_GPIO_Init+0x31c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d007      	beq.n	80010fe <HAL_GPIO_Init+0x206>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a49      	ldr	r2, [pc, #292]	; (8001218 <HAL_GPIO_Init+0x320>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d101      	bne.n	80010fa <HAL_GPIO_Init+0x202>
 80010f6:	2306      	movs	r3, #6
 80010f8:	e00c      	b.n	8001114 <HAL_GPIO_Init+0x21c>
 80010fa:	2307      	movs	r3, #7
 80010fc:	e00a      	b.n	8001114 <HAL_GPIO_Init+0x21c>
 80010fe:	2305      	movs	r3, #5
 8001100:	e008      	b.n	8001114 <HAL_GPIO_Init+0x21c>
 8001102:	2304      	movs	r3, #4
 8001104:	e006      	b.n	8001114 <HAL_GPIO_Init+0x21c>
 8001106:	2303      	movs	r3, #3
 8001108:	e004      	b.n	8001114 <HAL_GPIO_Init+0x21c>
 800110a:	2302      	movs	r3, #2
 800110c:	e002      	b.n	8001114 <HAL_GPIO_Init+0x21c>
 800110e:	2301      	movs	r3, #1
 8001110:	e000      	b.n	8001114 <HAL_GPIO_Init+0x21c>
 8001112:	2300      	movs	r3, #0
 8001114:	69fa      	ldr	r2, [r7, #28]
 8001116:	f002 0203 	and.w	r2, r2, #3
 800111a:	0092      	lsls	r2, r2, #2
 800111c:	4093      	lsls	r3, r2
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001124:	4935      	ldr	r1, [pc, #212]	; (80011fc <HAL_GPIO_Init+0x304>)
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	089b      	lsrs	r3, r3, #2
 800112a:	3302      	adds	r3, #2
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001132:	4b3a      	ldr	r3, [pc, #232]	; (800121c <HAL_GPIO_Init+0x324>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001156:	4a31      	ldr	r2, [pc, #196]	; (800121c <HAL_GPIO_Init+0x324>)
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800115c:	4b2f      	ldr	r3, [pc, #188]	; (800121c <HAL_GPIO_Init+0x324>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001180:	4a26      	ldr	r2, [pc, #152]	; (800121c <HAL_GPIO_Init+0x324>)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001186:	4b25      	ldr	r3, [pc, #148]	; (800121c <HAL_GPIO_Init+0x324>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011aa:	4a1c      	ldr	r2, [pc, #112]	; (800121c <HAL_GPIO_Init+0x324>)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011b0:	4b1a      	ldr	r3, [pc, #104]	; (800121c <HAL_GPIO_Init+0x324>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011d4:	4a11      	ldr	r2, [pc, #68]	; (800121c <HAL_GPIO_Init+0x324>)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3301      	adds	r3, #1
 80011de:	61fb      	str	r3, [r7, #28]
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	2b0f      	cmp	r3, #15
 80011e4:	f67f ae96 	bls.w	8000f14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	3724      	adds	r7, #36	; 0x24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40013800 	.word	0x40013800
 8001200:	40020000 	.word	0x40020000
 8001204:	40020400 	.word	0x40020400
 8001208:	40020800 	.word	0x40020800
 800120c:	40020c00 	.word	0x40020c00
 8001210:	40021000 	.word	0x40021000
 8001214:	40021400 	.word	0x40021400
 8001218:	40021800 	.word	0x40021800
 800121c:	40013c00 	.word	0x40013c00

08001220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	807b      	strh	r3, [r7, #2]
 800122c:	4613      	mov	r3, r2
 800122e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001230:	787b      	ldrb	r3, [r7, #1]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001236:	887a      	ldrh	r2, [r7, #2]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800123c:	e003      	b.n	8001246 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800123e:	887b      	ldrh	r3, [r7, #2]
 8001240:	041a      	lsls	r2, r3, #16
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	619a      	str	r2, [r3, #24]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e0cc      	b.n	8001402 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001268:	4b68      	ldr	r3, [pc, #416]	; (800140c <HAL_RCC_ClockConfig+0x1b8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 030f 	and.w	r3, r3, #15
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	429a      	cmp	r2, r3
 8001274:	d90c      	bls.n	8001290 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001276:	4b65      	ldr	r3, [pc, #404]	; (800140c <HAL_RCC_ClockConfig+0x1b8>)
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800127e:	4b63      	ldr	r3, [pc, #396]	; (800140c <HAL_RCC_ClockConfig+0x1b8>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	429a      	cmp	r2, r3
 800128a:	d001      	beq.n	8001290 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e0b8      	b.n	8001402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d020      	beq.n	80012de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d005      	beq.n	80012b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012a8:	4b59      	ldr	r3, [pc, #356]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	4a58      	ldr	r2, [pc, #352]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80012ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80012b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0308 	and.w	r3, r3, #8
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d005      	beq.n	80012cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012c0:	4b53      	ldr	r3, [pc, #332]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	4a52      	ldr	r2, [pc, #328]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80012c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80012ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012cc:	4b50      	ldr	r3, [pc, #320]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	494d      	ldr	r1, [pc, #308]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d044      	beq.n	8001374 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d107      	bne.n	8001302 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f2:	4b47      	ldr	r3, [pc, #284]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d119      	bne.n	8001332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e07f      	b.n	8001402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b02      	cmp	r3, #2
 8001308:	d003      	beq.n	8001312 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800130e:	2b03      	cmp	r3, #3
 8001310:	d107      	bne.n	8001322 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001312:	4b3f      	ldr	r3, [pc, #252]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d109      	bne.n	8001332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e06f      	b.n	8001402 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001322:	4b3b      	ldr	r3, [pc, #236]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e067      	b.n	8001402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001332:	4b37      	ldr	r3, [pc, #220]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f023 0203 	bic.w	r2, r3, #3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	4934      	ldr	r1, [pc, #208]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 8001340:	4313      	orrs	r3, r2
 8001342:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001344:	f7ff fce6 	bl	8000d14 <HAL_GetTick>
 8001348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800134a:	e00a      	b.n	8001362 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800134c:	f7ff fce2 	bl	8000d14 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	f241 3288 	movw	r2, #5000	; 0x1388
 800135a:	4293      	cmp	r3, r2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e04f      	b.n	8001402 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001362:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 020c 	and.w	r2, r3, #12
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	429a      	cmp	r2, r3
 8001372:	d1eb      	bne.n	800134c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001374:	4b25      	ldr	r3, [pc, #148]	; (800140c <HAL_RCC_ClockConfig+0x1b8>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 030f 	and.w	r3, r3, #15
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	429a      	cmp	r2, r3
 8001380:	d20c      	bcs.n	800139c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001382:	4b22      	ldr	r3, [pc, #136]	; (800140c <HAL_RCC_ClockConfig+0x1b8>)
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800138a:	4b20      	ldr	r3, [pc, #128]	; (800140c <HAL_RCC_ClockConfig+0x1b8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	429a      	cmp	r2, r3
 8001396:	d001      	beq.n	800139c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e032      	b.n	8001402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d008      	beq.n	80013ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013a8:	4b19      	ldr	r3, [pc, #100]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	4916      	ldr	r1, [pc, #88]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d009      	beq.n	80013da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013c6:	4b12      	ldr	r3, [pc, #72]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	490e      	ldr	r1, [pc, #56]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013da:	f000 f855 	bl	8001488 <HAL_RCC_GetSysClockFreq>
 80013de:	4602      	mov	r2, r0
 80013e0:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	091b      	lsrs	r3, r3, #4
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	490a      	ldr	r1, [pc, #40]	; (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 80013ec:	5ccb      	ldrb	r3, [r1, r3]
 80013ee:	fa22 f303 	lsr.w	r3, r2, r3
 80013f2:	4a09      	ldr	r2, [pc, #36]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80013f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <HAL_RCC_ClockConfig+0x1c8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fc46 	bl	8000c8c <HAL_InitTick>

  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40023c00 	.word	0x40023c00
 8001410:	40023800 	.word	0x40023800
 8001414:	08003364 	.word	0x08003364
 8001418:	20000000 	.word	0x20000000
 800141c:	20000004 	.word	0x20000004

08001420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001424:	4b03      	ldr	r3, [pc, #12]	; (8001434 <HAL_RCC_GetHCLKFreq+0x14>)
 8001426:	681b      	ldr	r3, [r3, #0]
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	20000000 	.word	0x20000000

08001438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800143c:	f7ff fff0 	bl	8001420 <HAL_RCC_GetHCLKFreq>
 8001440:	4602      	mov	r2, r0
 8001442:	4b05      	ldr	r3, [pc, #20]	; (8001458 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	0a9b      	lsrs	r3, r3, #10
 8001448:	f003 0307 	and.w	r3, r3, #7
 800144c:	4903      	ldr	r1, [pc, #12]	; (800145c <HAL_RCC_GetPCLK1Freq+0x24>)
 800144e:	5ccb      	ldrb	r3, [r1, r3]
 8001450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001454:	4618      	mov	r0, r3
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40023800 	.word	0x40023800
 800145c:	08003374 	.word	0x08003374

08001460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001464:	f7ff ffdc 	bl	8001420 <HAL_RCC_GetHCLKFreq>
 8001468:	4602      	mov	r2, r0
 800146a:	4b05      	ldr	r3, [pc, #20]	; (8001480 <HAL_RCC_GetPCLK2Freq+0x20>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	0b5b      	lsrs	r3, r3, #13
 8001470:	f003 0307 	and.w	r3, r3, #7
 8001474:	4903      	ldr	r1, [pc, #12]	; (8001484 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001476:	5ccb      	ldrb	r3, [r1, r3]
 8001478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800147c:	4618      	mov	r0, r3
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40023800 	.word	0x40023800
 8001484:	08003374 	.word	0x08003374

08001488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800148c:	b0ae      	sub	sp, #184	; 0xb8
 800148e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001490:	2300      	movs	r3, #0
 8001492:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001496:	2300      	movs	r3, #0
 8001498:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800149c:	2300      	movs	r3, #0
 800149e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014ae:	4bcb      	ldr	r3, [pc, #812]	; (80017dc <HAL_RCC_GetSysClockFreq+0x354>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 030c 	and.w	r3, r3, #12
 80014b6:	2b0c      	cmp	r3, #12
 80014b8:	f200 8206 	bhi.w	80018c8 <HAL_RCC_GetSysClockFreq+0x440>
 80014bc:	a201      	add	r2, pc, #4	; (adr r2, 80014c4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80014be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c2:	bf00      	nop
 80014c4:	080014f9 	.word	0x080014f9
 80014c8:	080018c9 	.word	0x080018c9
 80014cc:	080018c9 	.word	0x080018c9
 80014d0:	080018c9 	.word	0x080018c9
 80014d4:	08001501 	.word	0x08001501
 80014d8:	080018c9 	.word	0x080018c9
 80014dc:	080018c9 	.word	0x080018c9
 80014e0:	080018c9 	.word	0x080018c9
 80014e4:	08001509 	.word	0x08001509
 80014e8:	080018c9 	.word	0x080018c9
 80014ec:	080018c9 	.word	0x080018c9
 80014f0:	080018c9 	.word	0x080018c9
 80014f4:	080016f9 	.word	0x080016f9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014f8:	4bb9      	ldr	r3, [pc, #740]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x358>)
 80014fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80014fe:	e1e7      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001500:	4bb8      	ldr	r3, [pc, #736]	; (80017e4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001502:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001506:	e1e3      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001508:	4bb4      	ldr	r3, [pc, #720]	; (80017dc <HAL_RCC_GetSysClockFreq+0x354>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001510:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001514:	4bb1      	ldr	r3, [pc, #708]	; (80017dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d071      	beq.n	8001604 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001520:	4bae      	ldr	r3, [pc, #696]	; (80017dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	099b      	lsrs	r3, r3, #6
 8001526:	2200      	movs	r2, #0
 8001528:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800152c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001530:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001538:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800153c:	2300      	movs	r3, #0
 800153e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001542:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001546:	4622      	mov	r2, r4
 8001548:	462b      	mov	r3, r5
 800154a:	f04f 0000 	mov.w	r0, #0
 800154e:	f04f 0100 	mov.w	r1, #0
 8001552:	0159      	lsls	r1, r3, #5
 8001554:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001558:	0150      	lsls	r0, r2, #5
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4621      	mov	r1, r4
 8001560:	1a51      	subs	r1, r2, r1
 8001562:	6439      	str	r1, [r7, #64]	; 0x40
 8001564:	4629      	mov	r1, r5
 8001566:	eb63 0301 	sbc.w	r3, r3, r1
 800156a:	647b      	str	r3, [r7, #68]	; 0x44
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	f04f 0300 	mov.w	r3, #0
 8001574:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001578:	4649      	mov	r1, r9
 800157a:	018b      	lsls	r3, r1, #6
 800157c:	4641      	mov	r1, r8
 800157e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001582:	4641      	mov	r1, r8
 8001584:	018a      	lsls	r2, r1, #6
 8001586:	4641      	mov	r1, r8
 8001588:	1a51      	subs	r1, r2, r1
 800158a:	63b9      	str	r1, [r7, #56]	; 0x38
 800158c:	4649      	mov	r1, r9
 800158e:	eb63 0301 	sbc.w	r3, r3, r1
 8001592:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	f04f 0300 	mov.w	r3, #0
 800159c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80015a0:	4649      	mov	r1, r9
 80015a2:	00cb      	lsls	r3, r1, #3
 80015a4:	4641      	mov	r1, r8
 80015a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80015aa:	4641      	mov	r1, r8
 80015ac:	00ca      	lsls	r2, r1, #3
 80015ae:	4610      	mov	r0, r2
 80015b0:	4619      	mov	r1, r3
 80015b2:	4603      	mov	r3, r0
 80015b4:	4622      	mov	r2, r4
 80015b6:	189b      	adds	r3, r3, r2
 80015b8:	633b      	str	r3, [r7, #48]	; 0x30
 80015ba:	462b      	mov	r3, r5
 80015bc:	460a      	mov	r2, r1
 80015be:	eb42 0303 	adc.w	r3, r2, r3
 80015c2:	637b      	str	r3, [r7, #52]	; 0x34
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	f04f 0300 	mov.w	r3, #0
 80015cc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80015d0:	4629      	mov	r1, r5
 80015d2:	024b      	lsls	r3, r1, #9
 80015d4:	4621      	mov	r1, r4
 80015d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80015da:	4621      	mov	r1, r4
 80015dc:	024a      	lsls	r2, r1, #9
 80015de:	4610      	mov	r0, r2
 80015e0:	4619      	mov	r1, r3
 80015e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015e6:	2200      	movs	r2, #0
 80015e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80015ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80015f0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80015f4:	f7fe fe5c 	bl	80002b0 <__aeabi_uldivmod>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4613      	mov	r3, r2
 80015fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001602:	e067      	b.n	80016d4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001604:	4b75      	ldr	r3, [pc, #468]	; (80017dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	099b      	lsrs	r3, r3, #6
 800160a:	2200      	movs	r2, #0
 800160c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001610:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001614:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800161c:	67bb      	str	r3, [r7, #120]	; 0x78
 800161e:	2300      	movs	r3, #0
 8001620:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001622:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001626:	4622      	mov	r2, r4
 8001628:	462b      	mov	r3, r5
 800162a:	f04f 0000 	mov.w	r0, #0
 800162e:	f04f 0100 	mov.w	r1, #0
 8001632:	0159      	lsls	r1, r3, #5
 8001634:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001638:	0150      	lsls	r0, r2, #5
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4621      	mov	r1, r4
 8001640:	1a51      	subs	r1, r2, r1
 8001642:	62b9      	str	r1, [r7, #40]	; 0x28
 8001644:	4629      	mov	r1, r5
 8001646:	eb63 0301 	sbc.w	r3, r3, r1
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	f04f 0300 	mov.w	r3, #0
 8001654:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001658:	4649      	mov	r1, r9
 800165a:	018b      	lsls	r3, r1, #6
 800165c:	4641      	mov	r1, r8
 800165e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001662:	4641      	mov	r1, r8
 8001664:	018a      	lsls	r2, r1, #6
 8001666:	4641      	mov	r1, r8
 8001668:	ebb2 0a01 	subs.w	sl, r2, r1
 800166c:	4649      	mov	r1, r9
 800166e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001672:	f04f 0200 	mov.w	r2, #0
 8001676:	f04f 0300 	mov.w	r3, #0
 800167a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800167e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001682:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001686:	4692      	mov	sl, r2
 8001688:	469b      	mov	fp, r3
 800168a:	4623      	mov	r3, r4
 800168c:	eb1a 0303 	adds.w	r3, sl, r3
 8001690:	623b      	str	r3, [r7, #32]
 8001692:	462b      	mov	r3, r5
 8001694:	eb4b 0303 	adc.w	r3, fp, r3
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80016a6:	4629      	mov	r1, r5
 80016a8:	028b      	lsls	r3, r1, #10
 80016aa:	4621      	mov	r1, r4
 80016ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016b0:	4621      	mov	r1, r4
 80016b2:	028a      	lsls	r2, r1, #10
 80016b4:	4610      	mov	r0, r2
 80016b6:	4619      	mov	r1, r3
 80016b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016bc:	2200      	movs	r2, #0
 80016be:	673b      	str	r3, [r7, #112]	; 0x70
 80016c0:	677a      	str	r2, [r7, #116]	; 0x74
 80016c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80016c6:	f7fe fdf3 	bl	80002b0 <__aeabi_uldivmod>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4613      	mov	r3, r2
 80016d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016d4:	4b41      	ldr	r3, [pc, #260]	; (80017dc <HAL_RCC_GetSysClockFreq+0x354>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	0c1b      	lsrs	r3, r3, #16
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	3301      	adds	r3, #1
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80016e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80016ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80016f6:	e0eb      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016f8:	4b38      	ldr	r3, [pc, #224]	; (80017dc <HAL_RCC_GetSysClockFreq+0x354>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001700:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001704:	4b35      	ldr	r3, [pc, #212]	; (80017dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d06b      	beq.n	80017e8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001710:	4b32      	ldr	r3, [pc, #200]	; (80017dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	099b      	lsrs	r3, r3, #6
 8001716:	2200      	movs	r2, #0
 8001718:	66bb      	str	r3, [r7, #104]	; 0x68
 800171a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800171c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800171e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001722:	663b      	str	r3, [r7, #96]	; 0x60
 8001724:	2300      	movs	r3, #0
 8001726:	667b      	str	r3, [r7, #100]	; 0x64
 8001728:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800172c:	4622      	mov	r2, r4
 800172e:	462b      	mov	r3, r5
 8001730:	f04f 0000 	mov.w	r0, #0
 8001734:	f04f 0100 	mov.w	r1, #0
 8001738:	0159      	lsls	r1, r3, #5
 800173a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800173e:	0150      	lsls	r0, r2, #5
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4621      	mov	r1, r4
 8001746:	1a51      	subs	r1, r2, r1
 8001748:	61b9      	str	r1, [r7, #24]
 800174a:	4629      	mov	r1, r5
 800174c:	eb63 0301 	sbc.w	r3, r3, r1
 8001750:	61fb      	str	r3, [r7, #28]
 8001752:	f04f 0200 	mov.w	r2, #0
 8001756:	f04f 0300 	mov.w	r3, #0
 800175a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800175e:	4659      	mov	r1, fp
 8001760:	018b      	lsls	r3, r1, #6
 8001762:	4651      	mov	r1, sl
 8001764:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001768:	4651      	mov	r1, sl
 800176a:	018a      	lsls	r2, r1, #6
 800176c:	4651      	mov	r1, sl
 800176e:	ebb2 0801 	subs.w	r8, r2, r1
 8001772:	4659      	mov	r1, fp
 8001774:	eb63 0901 	sbc.w	r9, r3, r1
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	f04f 0300 	mov.w	r3, #0
 8001780:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001784:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001788:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800178c:	4690      	mov	r8, r2
 800178e:	4699      	mov	r9, r3
 8001790:	4623      	mov	r3, r4
 8001792:	eb18 0303 	adds.w	r3, r8, r3
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	462b      	mov	r3, r5
 800179a:	eb49 0303 	adc.w	r3, r9, r3
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	f04f 0300 	mov.w	r3, #0
 80017a8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80017ac:	4629      	mov	r1, r5
 80017ae:	024b      	lsls	r3, r1, #9
 80017b0:	4621      	mov	r1, r4
 80017b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017b6:	4621      	mov	r1, r4
 80017b8:	024a      	lsls	r2, r1, #9
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017c2:	2200      	movs	r2, #0
 80017c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80017c6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80017c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80017cc:	f7fe fd70 	bl	80002b0 <__aeabi_uldivmod>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4613      	mov	r3, r2
 80017d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80017da:	e065      	b.n	80018a8 <HAL_RCC_GetSysClockFreq+0x420>
 80017dc:	40023800 	.word	0x40023800
 80017e0:	00f42400 	.word	0x00f42400
 80017e4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e8:	4b3d      	ldr	r3, [pc, #244]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	099b      	lsrs	r3, r3, #6
 80017ee:	2200      	movs	r2, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	4611      	mov	r1, r2
 80017f4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80017f8:	653b      	str	r3, [r7, #80]	; 0x50
 80017fa:	2300      	movs	r3, #0
 80017fc:	657b      	str	r3, [r7, #84]	; 0x54
 80017fe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001802:	4642      	mov	r2, r8
 8001804:	464b      	mov	r3, r9
 8001806:	f04f 0000 	mov.w	r0, #0
 800180a:	f04f 0100 	mov.w	r1, #0
 800180e:	0159      	lsls	r1, r3, #5
 8001810:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001814:	0150      	lsls	r0, r2, #5
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4641      	mov	r1, r8
 800181c:	1a51      	subs	r1, r2, r1
 800181e:	60b9      	str	r1, [r7, #8]
 8001820:	4649      	mov	r1, r9
 8001822:	eb63 0301 	sbc.w	r3, r3, r1
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	f04f 0300 	mov.w	r3, #0
 8001830:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001834:	4659      	mov	r1, fp
 8001836:	018b      	lsls	r3, r1, #6
 8001838:	4651      	mov	r1, sl
 800183a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800183e:	4651      	mov	r1, sl
 8001840:	018a      	lsls	r2, r1, #6
 8001842:	4651      	mov	r1, sl
 8001844:	1a54      	subs	r4, r2, r1
 8001846:	4659      	mov	r1, fp
 8001848:	eb63 0501 	sbc.w	r5, r3, r1
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	f04f 0300 	mov.w	r3, #0
 8001854:	00eb      	lsls	r3, r5, #3
 8001856:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800185a:	00e2      	lsls	r2, r4, #3
 800185c:	4614      	mov	r4, r2
 800185e:	461d      	mov	r5, r3
 8001860:	4643      	mov	r3, r8
 8001862:	18e3      	adds	r3, r4, r3
 8001864:	603b      	str	r3, [r7, #0]
 8001866:	464b      	mov	r3, r9
 8001868:	eb45 0303 	adc.w	r3, r5, r3
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	f04f 0300 	mov.w	r3, #0
 8001876:	e9d7 4500 	ldrd	r4, r5, [r7]
 800187a:	4629      	mov	r1, r5
 800187c:	028b      	lsls	r3, r1, #10
 800187e:	4621      	mov	r1, r4
 8001880:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001884:	4621      	mov	r1, r4
 8001886:	028a      	lsls	r2, r1, #10
 8001888:	4610      	mov	r0, r2
 800188a:	4619      	mov	r1, r3
 800188c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001890:	2200      	movs	r2, #0
 8001892:	64bb      	str	r3, [r7, #72]	; 0x48
 8001894:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001896:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800189a:	f7fe fd09 	bl	80002b0 <__aeabi_uldivmod>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4613      	mov	r3, r2
 80018a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80018a8:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	0f1b      	lsrs	r3, r3, #28
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80018b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80018ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80018be:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80018c6:	e003      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80018ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80018ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	37b8      	adds	r7, #184	; 0xb8
 80018d8:	46bd      	mov	sp, r7
 80018da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800
 80018e4:	00f42400 	.word	0x00f42400

080018e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e28d      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	f000 8083 	beq.w	8001a0e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001908:	4b94      	ldr	r3, [pc, #592]	; (8001b5c <HAL_RCC_OscConfig+0x274>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 030c 	and.w	r3, r3, #12
 8001910:	2b04      	cmp	r3, #4
 8001912:	d019      	beq.n	8001948 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001914:	4b91      	ldr	r3, [pc, #580]	; (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800191c:	2b08      	cmp	r3, #8
 800191e:	d106      	bne.n	800192e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001920:	4b8e      	ldr	r3, [pc, #568]	; (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001928:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800192c:	d00c      	beq.n	8001948 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800192e:	4b8b      	ldr	r3, [pc, #556]	; (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001936:	2b0c      	cmp	r3, #12
 8001938:	d112      	bne.n	8001960 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800193a:	4b88      	ldr	r3, [pc, #544]	; (8001b5c <HAL_RCC_OscConfig+0x274>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001942:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001946:	d10b      	bne.n	8001960 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001948:	4b84      	ldr	r3, [pc, #528]	; (8001b5c <HAL_RCC_OscConfig+0x274>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d05b      	beq.n	8001a0c <HAL_RCC_OscConfig+0x124>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d157      	bne.n	8001a0c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e25a      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001968:	d106      	bne.n	8001978 <HAL_RCC_OscConfig+0x90>
 800196a:	4b7c      	ldr	r3, [pc, #496]	; (8001b5c <HAL_RCC_OscConfig+0x274>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a7b      	ldr	r2, [pc, #492]	; (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	e01d      	b.n	80019b4 <HAL_RCC_OscConfig+0xcc>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001980:	d10c      	bne.n	800199c <HAL_RCC_OscConfig+0xb4>
 8001982:	4b76      	ldr	r3, [pc, #472]	; (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a75      	ldr	r2, [pc, #468]	; (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	4b73      	ldr	r3, [pc, #460]	; (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a72      	ldr	r2, [pc, #456]	; (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	e00b      	b.n	80019b4 <HAL_RCC_OscConfig+0xcc>
 800199c:	4b6f      	ldr	r3, [pc, #444]	; (8001b5c <HAL_RCC_OscConfig+0x274>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a6e      	ldr	r2, [pc, #440]	; (8001b5c <HAL_RCC_OscConfig+0x274>)
 80019a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	4b6c      	ldr	r3, [pc, #432]	; (8001b5c <HAL_RCC_OscConfig+0x274>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a6b      	ldr	r2, [pc, #428]	; (8001b5c <HAL_RCC_OscConfig+0x274>)
 80019ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d013      	beq.n	80019e4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019bc:	f7ff f9aa 	bl	8000d14 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019c4:	f7ff f9a6 	bl	8000d14 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b64      	cmp	r3, #100	; 0x64
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e21f      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d6:	4b61      	ldr	r3, [pc, #388]	; (8001b5c <HAL_RCC_OscConfig+0x274>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0xdc>
 80019e2:	e014      	b.n	8001a0e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e4:	f7ff f996 	bl	8000d14 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019ec:	f7ff f992 	bl	8000d14 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b64      	cmp	r3, #100	; 0x64
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e20b      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019fe:	4b57      	ldr	r3, [pc, #348]	; (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x104>
 8001a0a:	e000      	b.n	8001a0e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d06f      	beq.n	8001afa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a1a:	4b50      	ldr	r3, [pc, #320]	; (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d017      	beq.n	8001a56 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a26:	4b4d      	ldr	r3, [pc, #308]	; (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a2e:	2b08      	cmp	r3, #8
 8001a30:	d105      	bne.n	8001a3e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a32:	4b4a      	ldr	r3, [pc, #296]	; (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00b      	beq.n	8001a56 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a3e:	4b47      	ldr	r3, [pc, #284]	; (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a46:	2b0c      	cmp	r3, #12
 8001a48:	d11c      	bne.n	8001a84 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a4a:	4b44      	ldr	r3, [pc, #272]	; (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d116      	bne.n	8001a84 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a56:	4b41      	ldr	r3, [pc, #260]	; (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d005      	beq.n	8001a6e <HAL_RCC_OscConfig+0x186>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d001      	beq.n	8001a6e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e1d3      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6e:	4b3b      	ldr	r3, [pc, #236]	; (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	4937      	ldr	r1, [pc, #220]	; (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a82:	e03a      	b.n	8001afa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d020      	beq.n	8001ace <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a8c:	4b34      	ldr	r3, [pc, #208]	; (8001b60 <HAL_RCC_OscConfig+0x278>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a92:	f7ff f93f 	bl	8000d14 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a9a:	f7ff f93b 	bl	8000d14 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e1b4      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aac:	4b2b      	ldr	r3, [pc, #172]	; (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0f0      	beq.n	8001a9a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab8:	4b28      	ldr	r3, [pc, #160]	; (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	4925      	ldr	r1, [pc, #148]	; (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	600b      	str	r3, [r1, #0]
 8001acc:	e015      	b.n	8001afa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ace:	4b24      	ldr	r3, [pc, #144]	; (8001b60 <HAL_RCC_OscConfig+0x278>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad4:	f7ff f91e 	bl	8000d14 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001adc:	f7ff f91a 	bl	8000d14 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e193      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aee:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d036      	beq.n	8001b74 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d016      	beq.n	8001b3c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <HAL_RCC_OscConfig+0x27c>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b14:	f7ff f8fe 	bl	8000d14 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b1c:	f7ff f8fa 	bl	8000d14 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e173      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0x234>
 8001b3a:	e01b      	b.n	8001b74 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b3c:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <HAL_RCC_OscConfig+0x27c>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b42:	f7ff f8e7 	bl	8000d14 <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b48:	e00e      	b.n	8001b68 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b4a:	f7ff f8e3 	bl	8000d14 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d907      	bls.n	8001b68 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e15c      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	42470000 	.word	0x42470000
 8001b64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b68:	4b8a      	ldr	r3, [pc, #552]	; (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1ea      	bne.n	8001b4a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f000 8097 	beq.w	8001cb0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b82:	2300      	movs	r3, #0
 8001b84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b86:	4b83      	ldr	r3, [pc, #524]	; (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d10f      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	4b7f      	ldr	r3, [pc, #508]	; (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	4a7e      	ldr	r2, [pc, #504]	; (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba2:	4b7c      	ldr	r3, [pc, #496]	; (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb2:	4b79      	ldr	r3, [pc, #484]	; (8001d98 <HAL_RCC_OscConfig+0x4b0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d118      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bbe:	4b76      	ldr	r3, [pc, #472]	; (8001d98 <HAL_RCC_OscConfig+0x4b0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a75      	ldr	r2, [pc, #468]	; (8001d98 <HAL_RCC_OscConfig+0x4b0>)
 8001bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bca:	f7ff f8a3 	bl	8000d14 <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bd2:	f7ff f89f 	bl	8000d14 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e118      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be4:	4b6c      	ldr	r3, [pc, #432]	; (8001d98 <HAL_RCC_OscConfig+0x4b0>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0f0      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d106      	bne.n	8001c06 <HAL_RCC_OscConfig+0x31e>
 8001bf8:	4b66      	ldr	r3, [pc, #408]	; (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfc:	4a65      	ldr	r2, [pc, #404]	; (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	6713      	str	r3, [r2, #112]	; 0x70
 8001c04:	e01c      	b.n	8001c40 <HAL_RCC_OscConfig+0x358>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	2b05      	cmp	r3, #5
 8001c0c:	d10c      	bne.n	8001c28 <HAL_RCC_OscConfig+0x340>
 8001c0e:	4b61      	ldr	r3, [pc, #388]	; (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c12:	4a60      	ldr	r2, [pc, #384]	; (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	6713      	str	r3, [r2, #112]	; 0x70
 8001c1a:	4b5e      	ldr	r3, [pc, #376]	; (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c1e:	4a5d      	ldr	r2, [pc, #372]	; (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6713      	str	r3, [r2, #112]	; 0x70
 8001c26:	e00b      	b.n	8001c40 <HAL_RCC_OscConfig+0x358>
 8001c28:	4b5a      	ldr	r3, [pc, #360]	; (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2c:	4a59      	ldr	r2, [pc, #356]	; (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001c2e:	f023 0301 	bic.w	r3, r3, #1
 8001c32:	6713      	str	r3, [r2, #112]	; 0x70
 8001c34:	4b57      	ldr	r3, [pc, #348]	; (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c38:	4a56      	ldr	r2, [pc, #344]	; (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001c3a:	f023 0304 	bic.w	r3, r3, #4
 8001c3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d015      	beq.n	8001c74 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c48:	f7ff f864 	bl	8000d14 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c4e:	e00a      	b.n	8001c66 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c50:	f7ff f860 	bl	8000d14 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e0d7      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c66:	4b4b      	ldr	r3, [pc, #300]	; (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0ee      	beq.n	8001c50 <HAL_RCC_OscConfig+0x368>
 8001c72:	e014      	b.n	8001c9e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c74:	f7ff f84e 	bl	8000d14 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c7a:	e00a      	b.n	8001c92 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c7c:	f7ff f84a 	bl	8000d14 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e0c1      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c92:	4b40      	ldr	r3, [pc, #256]	; (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1ee      	bne.n	8001c7c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d105      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ca4:	4b3b      	ldr	r3, [pc, #236]	; (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	4a3a      	ldr	r2, [pc, #232]	; (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001caa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 80ad 	beq.w	8001e14 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cba:	4b36      	ldr	r3, [pc, #216]	; (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	2b08      	cmp	r3, #8
 8001cc4:	d060      	beq.n	8001d88 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d145      	bne.n	8001d5a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cce:	4b33      	ldr	r3, [pc, #204]	; (8001d9c <HAL_RCC_OscConfig+0x4b4>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd4:	f7ff f81e 	bl	8000d14 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cdc:	f7ff f81a 	bl	8000d14 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e093      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cee:	4b29      	ldr	r3, [pc, #164]	; (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69da      	ldr	r2, [r3, #28]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	019b      	lsls	r3, r3, #6
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d10:	085b      	lsrs	r3, r3, #1
 8001d12:	3b01      	subs	r3, #1
 8001d14:	041b      	lsls	r3, r3, #16
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1c:	061b      	lsls	r3, r3, #24
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d24:	071b      	lsls	r3, r3, #28
 8001d26:	491b      	ldr	r1, [pc, #108]	; (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d2c:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <HAL_RCC_OscConfig+0x4b4>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d32:	f7fe ffef 	bl	8000d14 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d3a:	f7fe ffeb 	bl	8000d14 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e064      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d4c:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f0      	beq.n	8001d3a <HAL_RCC_OscConfig+0x452>
 8001d58:	e05c      	b.n	8001e14 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5a:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <HAL_RCC_OscConfig+0x4b4>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d60:	f7fe ffd8 	bl	8000d14 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d68:	f7fe ffd4 	bl	8000d14 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e04d      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d7a:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f0      	bne.n	8001d68 <HAL_RCC_OscConfig+0x480>
 8001d86:	e045      	b.n	8001e14 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d107      	bne.n	8001da0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e040      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40007000 	.word	0x40007000
 8001d9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001da0:	4b1f      	ldr	r3, [pc, #124]	; (8001e20 <HAL_RCC_OscConfig+0x538>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d030      	beq.n	8001e10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d129      	bne.n	8001e10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d122      	bne.n	8001e10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001dd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d119      	bne.n	8001e10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de6:	085b      	lsrs	r3, r3, #1
 8001de8:	3b01      	subs	r3, #1
 8001dea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d10f      	bne.n	8001e10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d107      	bne.n	8001e10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d001      	beq.n	8001e14 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e000      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40023800 	.word	0x40023800

08001e24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e03f      	b.n	8001eb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d106      	bne.n	8001e50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7fe fd88 	bl	8000960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2224      	movs	r2, #36	; 0x24
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f829 	bl	8001ec0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	695a      	ldr	r2, [r3, #20]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2220      	movs	r2, #32
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2220      	movs	r2, #32
 8001eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ec0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ec4:	b0c0      	sub	sp, #256	; 0x100
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001edc:	68d9      	ldr	r1, [r3, #12]
 8001ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	ea40 0301 	orr.w	r3, r0, r1
 8001ee8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	431a      	orrs	r2, r3
 8001f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001f18:	f021 010c 	bic.w	r1, r1, #12
 8001f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001f26:	430b      	orrs	r3, r1
 8001f28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f3a:	6999      	ldr	r1, [r3, #24]
 8001f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	ea40 0301 	orr.w	r3, r0, r1
 8001f46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	4b8f      	ldr	r3, [pc, #572]	; (800218c <UART_SetConfig+0x2cc>)
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d005      	beq.n	8001f60 <UART_SetConfig+0xa0>
 8001f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	4b8d      	ldr	r3, [pc, #564]	; (8002190 <UART_SetConfig+0x2d0>)
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d104      	bne.n	8001f6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f60:	f7ff fa7e 	bl	8001460 <HAL_RCC_GetPCLK2Freq>
 8001f64:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001f68:	e003      	b.n	8001f72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001f6a:	f7ff fa65 	bl	8001438 <HAL_RCC_GetPCLK1Freq>
 8001f6e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f76:	69db      	ldr	r3, [r3, #28]
 8001f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f7c:	f040 810c 	bne.w	8002198 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f84:	2200      	movs	r2, #0
 8001f86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001f8a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001f8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001f92:	4622      	mov	r2, r4
 8001f94:	462b      	mov	r3, r5
 8001f96:	1891      	adds	r1, r2, r2
 8001f98:	65b9      	str	r1, [r7, #88]	; 0x58
 8001f9a:	415b      	adcs	r3, r3
 8001f9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001fa2:	4621      	mov	r1, r4
 8001fa4:	eb12 0801 	adds.w	r8, r2, r1
 8001fa8:	4629      	mov	r1, r5
 8001faa:	eb43 0901 	adc.w	r9, r3, r1
 8001fae:	f04f 0200 	mov.w	r2, #0
 8001fb2:	f04f 0300 	mov.w	r3, #0
 8001fb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fc2:	4690      	mov	r8, r2
 8001fc4:	4699      	mov	r9, r3
 8001fc6:	4623      	mov	r3, r4
 8001fc8:	eb18 0303 	adds.w	r3, r8, r3
 8001fcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001fd0:	462b      	mov	r3, r5
 8001fd2:	eb49 0303 	adc.w	r3, r9, r3
 8001fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001fe6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001fea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001fee:	460b      	mov	r3, r1
 8001ff0:	18db      	adds	r3, r3, r3
 8001ff2:	653b      	str	r3, [r7, #80]	; 0x50
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	eb42 0303 	adc.w	r3, r2, r3
 8001ffa:	657b      	str	r3, [r7, #84]	; 0x54
 8001ffc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002000:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002004:	f7fe f954 	bl	80002b0 <__aeabi_uldivmod>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4b61      	ldr	r3, [pc, #388]	; (8002194 <UART_SetConfig+0x2d4>)
 800200e:	fba3 2302 	umull	r2, r3, r3, r2
 8002012:	095b      	lsrs	r3, r3, #5
 8002014:	011c      	lsls	r4, r3, #4
 8002016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800201a:	2200      	movs	r2, #0
 800201c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002020:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002024:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002028:	4642      	mov	r2, r8
 800202a:	464b      	mov	r3, r9
 800202c:	1891      	adds	r1, r2, r2
 800202e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002030:	415b      	adcs	r3, r3
 8002032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002034:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002038:	4641      	mov	r1, r8
 800203a:	eb12 0a01 	adds.w	sl, r2, r1
 800203e:	4649      	mov	r1, r9
 8002040:	eb43 0b01 	adc.w	fp, r3, r1
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002050:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002054:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002058:	4692      	mov	sl, r2
 800205a:	469b      	mov	fp, r3
 800205c:	4643      	mov	r3, r8
 800205e:	eb1a 0303 	adds.w	r3, sl, r3
 8002062:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002066:	464b      	mov	r3, r9
 8002068:	eb4b 0303 	adc.w	r3, fp, r3
 800206c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800207c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002080:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002084:	460b      	mov	r3, r1
 8002086:	18db      	adds	r3, r3, r3
 8002088:	643b      	str	r3, [r7, #64]	; 0x40
 800208a:	4613      	mov	r3, r2
 800208c:	eb42 0303 	adc.w	r3, r2, r3
 8002090:	647b      	str	r3, [r7, #68]	; 0x44
 8002092:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002096:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800209a:	f7fe f909 	bl	80002b0 <__aeabi_uldivmod>
 800209e:	4602      	mov	r2, r0
 80020a0:	460b      	mov	r3, r1
 80020a2:	4611      	mov	r1, r2
 80020a4:	4b3b      	ldr	r3, [pc, #236]	; (8002194 <UART_SetConfig+0x2d4>)
 80020a6:	fba3 2301 	umull	r2, r3, r3, r1
 80020aa:	095b      	lsrs	r3, r3, #5
 80020ac:	2264      	movs	r2, #100	; 0x64
 80020ae:	fb02 f303 	mul.w	r3, r2, r3
 80020b2:	1acb      	subs	r3, r1, r3
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80020ba:	4b36      	ldr	r3, [pc, #216]	; (8002194 <UART_SetConfig+0x2d4>)
 80020bc:	fba3 2302 	umull	r2, r3, r3, r2
 80020c0:	095b      	lsrs	r3, r3, #5
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80020c8:	441c      	add	r4, r3
 80020ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020ce:	2200      	movs	r2, #0
 80020d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80020d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80020d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80020dc:	4642      	mov	r2, r8
 80020de:	464b      	mov	r3, r9
 80020e0:	1891      	adds	r1, r2, r2
 80020e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80020e4:	415b      	adcs	r3, r3
 80020e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80020ec:	4641      	mov	r1, r8
 80020ee:	1851      	adds	r1, r2, r1
 80020f0:	6339      	str	r1, [r7, #48]	; 0x30
 80020f2:	4649      	mov	r1, r9
 80020f4:	414b      	adcs	r3, r1
 80020f6:	637b      	str	r3, [r7, #52]	; 0x34
 80020f8:	f04f 0200 	mov.w	r2, #0
 80020fc:	f04f 0300 	mov.w	r3, #0
 8002100:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002104:	4659      	mov	r1, fp
 8002106:	00cb      	lsls	r3, r1, #3
 8002108:	4651      	mov	r1, sl
 800210a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800210e:	4651      	mov	r1, sl
 8002110:	00ca      	lsls	r2, r1, #3
 8002112:	4610      	mov	r0, r2
 8002114:	4619      	mov	r1, r3
 8002116:	4603      	mov	r3, r0
 8002118:	4642      	mov	r2, r8
 800211a:	189b      	adds	r3, r3, r2
 800211c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002120:	464b      	mov	r3, r9
 8002122:	460a      	mov	r2, r1
 8002124:	eb42 0303 	adc.w	r3, r2, r3
 8002128:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800212c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002138:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800213c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002140:	460b      	mov	r3, r1
 8002142:	18db      	adds	r3, r3, r3
 8002144:	62bb      	str	r3, [r7, #40]	; 0x28
 8002146:	4613      	mov	r3, r2
 8002148:	eb42 0303 	adc.w	r3, r2, r3
 800214c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800214e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002152:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002156:	f7fe f8ab 	bl	80002b0 <__aeabi_uldivmod>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <UART_SetConfig+0x2d4>)
 8002160:	fba3 1302 	umull	r1, r3, r3, r2
 8002164:	095b      	lsrs	r3, r3, #5
 8002166:	2164      	movs	r1, #100	; 0x64
 8002168:	fb01 f303 	mul.w	r3, r1, r3
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	3332      	adds	r3, #50	; 0x32
 8002172:	4a08      	ldr	r2, [pc, #32]	; (8002194 <UART_SetConfig+0x2d4>)
 8002174:	fba2 2303 	umull	r2, r3, r2, r3
 8002178:	095b      	lsrs	r3, r3, #5
 800217a:	f003 0207 	and.w	r2, r3, #7
 800217e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4422      	add	r2, r4
 8002186:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002188:	e106      	b.n	8002398 <UART_SetConfig+0x4d8>
 800218a:	bf00      	nop
 800218c:	40011000 	.word	0x40011000
 8002190:	40011400 	.word	0x40011400
 8002194:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002198:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800219c:	2200      	movs	r2, #0
 800219e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80021a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80021a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80021aa:	4642      	mov	r2, r8
 80021ac:	464b      	mov	r3, r9
 80021ae:	1891      	adds	r1, r2, r2
 80021b0:	6239      	str	r1, [r7, #32]
 80021b2:	415b      	adcs	r3, r3
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
 80021b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021ba:	4641      	mov	r1, r8
 80021bc:	1854      	adds	r4, r2, r1
 80021be:	4649      	mov	r1, r9
 80021c0:	eb43 0501 	adc.w	r5, r3, r1
 80021c4:	f04f 0200 	mov.w	r2, #0
 80021c8:	f04f 0300 	mov.w	r3, #0
 80021cc:	00eb      	lsls	r3, r5, #3
 80021ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021d2:	00e2      	lsls	r2, r4, #3
 80021d4:	4614      	mov	r4, r2
 80021d6:	461d      	mov	r5, r3
 80021d8:	4643      	mov	r3, r8
 80021da:	18e3      	adds	r3, r4, r3
 80021dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80021e0:	464b      	mov	r3, r9
 80021e2:	eb45 0303 	adc.w	r3, r5, r3
 80021e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80021ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80021f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	f04f 0300 	mov.w	r3, #0
 8002202:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002206:	4629      	mov	r1, r5
 8002208:	008b      	lsls	r3, r1, #2
 800220a:	4621      	mov	r1, r4
 800220c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002210:	4621      	mov	r1, r4
 8002212:	008a      	lsls	r2, r1, #2
 8002214:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002218:	f7fe f84a 	bl	80002b0 <__aeabi_uldivmod>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	4b60      	ldr	r3, [pc, #384]	; (80023a4 <UART_SetConfig+0x4e4>)
 8002222:	fba3 2302 	umull	r2, r3, r3, r2
 8002226:	095b      	lsrs	r3, r3, #5
 8002228:	011c      	lsls	r4, r3, #4
 800222a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800222e:	2200      	movs	r2, #0
 8002230:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002234:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002238:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800223c:	4642      	mov	r2, r8
 800223e:	464b      	mov	r3, r9
 8002240:	1891      	adds	r1, r2, r2
 8002242:	61b9      	str	r1, [r7, #24]
 8002244:	415b      	adcs	r3, r3
 8002246:	61fb      	str	r3, [r7, #28]
 8002248:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800224c:	4641      	mov	r1, r8
 800224e:	1851      	adds	r1, r2, r1
 8002250:	6139      	str	r1, [r7, #16]
 8002252:	4649      	mov	r1, r9
 8002254:	414b      	adcs	r3, r1
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	f04f 0200 	mov.w	r2, #0
 800225c:	f04f 0300 	mov.w	r3, #0
 8002260:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002264:	4659      	mov	r1, fp
 8002266:	00cb      	lsls	r3, r1, #3
 8002268:	4651      	mov	r1, sl
 800226a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800226e:	4651      	mov	r1, sl
 8002270:	00ca      	lsls	r2, r1, #3
 8002272:	4610      	mov	r0, r2
 8002274:	4619      	mov	r1, r3
 8002276:	4603      	mov	r3, r0
 8002278:	4642      	mov	r2, r8
 800227a:	189b      	adds	r3, r3, r2
 800227c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002280:	464b      	mov	r3, r9
 8002282:	460a      	mov	r2, r1
 8002284:	eb42 0303 	adc.w	r3, r2, r3
 8002288:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800228c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	67bb      	str	r3, [r7, #120]	; 0x78
 8002296:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002298:	f04f 0200 	mov.w	r2, #0
 800229c:	f04f 0300 	mov.w	r3, #0
 80022a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80022a4:	4649      	mov	r1, r9
 80022a6:	008b      	lsls	r3, r1, #2
 80022a8:	4641      	mov	r1, r8
 80022aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022ae:	4641      	mov	r1, r8
 80022b0:	008a      	lsls	r2, r1, #2
 80022b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80022b6:	f7fd fffb 	bl	80002b0 <__aeabi_uldivmod>
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	4611      	mov	r1, r2
 80022c0:	4b38      	ldr	r3, [pc, #224]	; (80023a4 <UART_SetConfig+0x4e4>)
 80022c2:	fba3 2301 	umull	r2, r3, r3, r1
 80022c6:	095b      	lsrs	r3, r3, #5
 80022c8:	2264      	movs	r2, #100	; 0x64
 80022ca:	fb02 f303 	mul.w	r3, r2, r3
 80022ce:	1acb      	subs	r3, r1, r3
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	3332      	adds	r3, #50	; 0x32
 80022d4:	4a33      	ldr	r2, [pc, #204]	; (80023a4 <UART_SetConfig+0x4e4>)
 80022d6:	fba2 2303 	umull	r2, r3, r2, r3
 80022da:	095b      	lsrs	r3, r3, #5
 80022dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022e0:	441c      	add	r4, r3
 80022e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022e6:	2200      	movs	r2, #0
 80022e8:	673b      	str	r3, [r7, #112]	; 0x70
 80022ea:	677a      	str	r2, [r7, #116]	; 0x74
 80022ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80022f0:	4642      	mov	r2, r8
 80022f2:	464b      	mov	r3, r9
 80022f4:	1891      	adds	r1, r2, r2
 80022f6:	60b9      	str	r1, [r7, #8]
 80022f8:	415b      	adcs	r3, r3
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002300:	4641      	mov	r1, r8
 8002302:	1851      	adds	r1, r2, r1
 8002304:	6039      	str	r1, [r7, #0]
 8002306:	4649      	mov	r1, r9
 8002308:	414b      	adcs	r3, r1
 800230a:	607b      	str	r3, [r7, #4]
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	f04f 0300 	mov.w	r3, #0
 8002314:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002318:	4659      	mov	r1, fp
 800231a:	00cb      	lsls	r3, r1, #3
 800231c:	4651      	mov	r1, sl
 800231e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002322:	4651      	mov	r1, sl
 8002324:	00ca      	lsls	r2, r1, #3
 8002326:	4610      	mov	r0, r2
 8002328:	4619      	mov	r1, r3
 800232a:	4603      	mov	r3, r0
 800232c:	4642      	mov	r2, r8
 800232e:	189b      	adds	r3, r3, r2
 8002330:	66bb      	str	r3, [r7, #104]	; 0x68
 8002332:	464b      	mov	r3, r9
 8002334:	460a      	mov	r2, r1
 8002336:	eb42 0303 	adc.w	r3, r2, r3
 800233a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800233c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	663b      	str	r3, [r7, #96]	; 0x60
 8002346:	667a      	str	r2, [r7, #100]	; 0x64
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	f04f 0300 	mov.w	r3, #0
 8002350:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002354:	4649      	mov	r1, r9
 8002356:	008b      	lsls	r3, r1, #2
 8002358:	4641      	mov	r1, r8
 800235a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800235e:	4641      	mov	r1, r8
 8002360:	008a      	lsls	r2, r1, #2
 8002362:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002366:	f7fd ffa3 	bl	80002b0 <__aeabi_uldivmod>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <UART_SetConfig+0x4e4>)
 8002370:	fba3 1302 	umull	r1, r3, r3, r2
 8002374:	095b      	lsrs	r3, r3, #5
 8002376:	2164      	movs	r1, #100	; 0x64
 8002378:	fb01 f303 	mul.w	r3, r1, r3
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	3332      	adds	r3, #50	; 0x32
 8002382:	4a08      	ldr	r2, [pc, #32]	; (80023a4 <UART_SetConfig+0x4e4>)
 8002384:	fba2 2303 	umull	r2, r3, r2, r3
 8002388:	095b      	lsrs	r3, r3, #5
 800238a:	f003 020f 	and.w	r2, r3, #15
 800238e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4422      	add	r2, r4
 8002396:	609a      	str	r2, [r3, #8]
}
 8002398:	bf00      	nop
 800239a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800239e:	46bd      	mov	sp, r7
 80023a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023a4:	51eb851f 	.word	0x51eb851f

080023a8 <rand>:
 80023a8:	4b16      	ldr	r3, [pc, #88]	; (8002404 <rand+0x5c>)
 80023aa:	b510      	push	{r4, lr}
 80023ac:	681c      	ldr	r4, [r3, #0]
 80023ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80023b0:	b9b3      	cbnz	r3, 80023e0 <rand+0x38>
 80023b2:	2018      	movs	r0, #24
 80023b4:	f000 fa0e 	bl	80027d4 <malloc>
 80023b8:	4602      	mov	r2, r0
 80023ba:	6320      	str	r0, [r4, #48]	; 0x30
 80023bc:	b920      	cbnz	r0, 80023c8 <rand+0x20>
 80023be:	4b12      	ldr	r3, [pc, #72]	; (8002408 <rand+0x60>)
 80023c0:	4812      	ldr	r0, [pc, #72]	; (800240c <rand+0x64>)
 80023c2:	2152      	movs	r1, #82	; 0x52
 80023c4:	f000 f99c 	bl	8002700 <__assert_func>
 80023c8:	4911      	ldr	r1, [pc, #68]	; (8002410 <rand+0x68>)
 80023ca:	4b12      	ldr	r3, [pc, #72]	; (8002414 <rand+0x6c>)
 80023cc:	e9c0 1300 	strd	r1, r3, [r0]
 80023d0:	4b11      	ldr	r3, [pc, #68]	; (8002418 <rand+0x70>)
 80023d2:	6083      	str	r3, [r0, #8]
 80023d4:	230b      	movs	r3, #11
 80023d6:	8183      	strh	r3, [r0, #12]
 80023d8:	2100      	movs	r1, #0
 80023da:	2001      	movs	r0, #1
 80023dc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80023e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80023e2:	480e      	ldr	r0, [pc, #56]	; (800241c <rand+0x74>)
 80023e4:	690b      	ldr	r3, [r1, #16]
 80023e6:	694c      	ldr	r4, [r1, #20]
 80023e8:	4a0d      	ldr	r2, [pc, #52]	; (8002420 <rand+0x78>)
 80023ea:	4358      	muls	r0, r3
 80023ec:	fb02 0004 	mla	r0, r2, r4, r0
 80023f0:	fba3 3202 	umull	r3, r2, r3, r2
 80023f4:	3301      	adds	r3, #1
 80023f6:	eb40 0002 	adc.w	r0, r0, r2
 80023fa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80023fe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002402:	bd10      	pop	{r4, pc}
 8002404:	20000064 	.word	0x20000064
 8002408:	0800337c 	.word	0x0800337c
 800240c:	08003393 	.word	0x08003393
 8002410:	abcd330e 	.word	0xabcd330e
 8002414:	e66d1234 	.word	0xe66d1234
 8002418:	0005deec 	.word	0x0005deec
 800241c:	5851f42d 	.word	0x5851f42d
 8002420:	4c957f2d 	.word	0x4c957f2d

08002424 <std>:
 8002424:	2300      	movs	r3, #0
 8002426:	b510      	push	{r4, lr}
 8002428:	4604      	mov	r4, r0
 800242a:	e9c0 3300 	strd	r3, r3, [r0]
 800242e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002432:	6083      	str	r3, [r0, #8]
 8002434:	8181      	strh	r1, [r0, #12]
 8002436:	6643      	str	r3, [r0, #100]	; 0x64
 8002438:	81c2      	strh	r2, [r0, #14]
 800243a:	6183      	str	r3, [r0, #24]
 800243c:	4619      	mov	r1, r3
 800243e:	2208      	movs	r2, #8
 8002440:	305c      	adds	r0, #92	; 0x5c
 8002442:	f000 f8e2 	bl	800260a <memset>
 8002446:	4b05      	ldr	r3, [pc, #20]	; (800245c <std+0x38>)
 8002448:	6263      	str	r3, [r4, #36]	; 0x24
 800244a:	4b05      	ldr	r3, [pc, #20]	; (8002460 <std+0x3c>)
 800244c:	62a3      	str	r3, [r4, #40]	; 0x28
 800244e:	4b05      	ldr	r3, [pc, #20]	; (8002464 <std+0x40>)
 8002450:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002452:	4b05      	ldr	r3, [pc, #20]	; (8002468 <std+0x44>)
 8002454:	6224      	str	r4, [r4, #32]
 8002456:	6323      	str	r3, [r4, #48]	; 0x30
 8002458:	bd10      	pop	{r4, pc}
 800245a:	bf00      	nop
 800245c:	08002585 	.word	0x08002585
 8002460:	080025a7 	.word	0x080025a7
 8002464:	080025df 	.word	0x080025df
 8002468:	08002603 	.word	0x08002603

0800246c <stdio_exit_handler>:
 800246c:	4a02      	ldr	r2, [pc, #8]	; (8002478 <stdio_exit_handler+0xc>)
 800246e:	4903      	ldr	r1, [pc, #12]	; (800247c <stdio_exit_handler+0x10>)
 8002470:	4803      	ldr	r0, [pc, #12]	; (8002480 <stdio_exit_handler+0x14>)
 8002472:	f000 b869 	b.w	8002548 <_fwalk_sglue>
 8002476:	bf00      	nop
 8002478:	2000000c 	.word	0x2000000c
 800247c:	08002a49 	.word	0x08002a49
 8002480:	20000018 	.word	0x20000018

08002484 <cleanup_stdio>:
 8002484:	6841      	ldr	r1, [r0, #4]
 8002486:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <cleanup_stdio+0x34>)
 8002488:	4299      	cmp	r1, r3
 800248a:	b510      	push	{r4, lr}
 800248c:	4604      	mov	r4, r0
 800248e:	d001      	beq.n	8002494 <cleanup_stdio+0x10>
 8002490:	f000 fada 	bl	8002a48 <_fflush_r>
 8002494:	68a1      	ldr	r1, [r4, #8]
 8002496:	4b09      	ldr	r3, [pc, #36]	; (80024bc <cleanup_stdio+0x38>)
 8002498:	4299      	cmp	r1, r3
 800249a:	d002      	beq.n	80024a2 <cleanup_stdio+0x1e>
 800249c:	4620      	mov	r0, r4
 800249e:	f000 fad3 	bl	8002a48 <_fflush_r>
 80024a2:	68e1      	ldr	r1, [r4, #12]
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <cleanup_stdio+0x3c>)
 80024a6:	4299      	cmp	r1, r3
 80024a8:	d004      	beq.n	80024b4 <cleanup_stdio+0x30>
 80024aa:	4620      	mov	r0, r4
 80024ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024b0:	f000 baca 	b.w	8002a48 <_fflush_r>
 80024b4:	bd10      	pop	{r4, pc}
 80024b6:	bf00      	nop
 80024b8:	200000d0 	.word	0x200000d0
 80024bc:	20000138 	.word	0x20000138
 80024c0:	200001a0 	.word	0x200001a0

080024c4 <global_stdio_init.part.0>:
 80024c4:	b510      	push	{r4, lr}
 80024c6:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <global_stdio_init.part.0+0x30>)
 80024c8:	4c0b      	ldr	r4, [pc, #44]	; (80024f8 <global_stdio_init.part.0+0x34>)
 80024ca:	4a0c      	ldr	r2, [pc, #48]	; (80024fc <global_stdio_init.part.0+0x38>)
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	4620      	mov	r0, r4
 80024d0:	2200      	movs	r2, #0
 80024d2:	2104      	movs	r1, #4
 80024d4:	f7ff ffa6 	bl	8002424 <std>
 80024d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80024dc:	2201      	movs	r2, #1
 80024de:	2109      	movs	r1, #9
 80024e0:	f7ff ffa0 	bl	8002424 <std>
 80024e4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80024e8:	2202      	movs	r2, #2
 80024ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024ee:	2112      	movs	r1, #18
 80024f0:	f7ff bf98 	b.w	8002424 <std>
 80024f4:	20000208 	.word	0x20000208
 80024f8:	200000d0 	.word	0x200000d0
 80024fc:	0800246d 	.word	0x0800246d

08002500 <__sfp_lock_acquire>:
 8002500:	4801      	ldr	r0, [pc, #4]	; (8002508 <__sfp_lock_acquire+0x8>)
 8002502:	f000 b8fb 	b.w	80026fc <__retarget_lock_acquire_recursive>
 8002506:	bf00      	nop
 8002508:	20000211 	.word	0x20000211

0800250c <__sfp_lock_release>:
 800250c:	4801      	ldr	r0, [pc, #4]	; (8002514 <__sfp_lock_release+0x8>)
 800250e:	f000 b8f6 	b.w	80026fe <__retarget_lock_release_recursive>
 8002512:	bf00      	nop
 8002514:	20000211 	.word	0x20000211

08002518 <__sinit>:
 8002518:	b510      	push	{r4, lr}
 800251a:	4604      	mov	r4, r0
 800251c:	f7ff fff0 	bl	8002500 <__sfp_lock_acquire>
 8002520:	6a23      	ldr	r3, [r4, #32]
 8002522:	b11b      	cbz	r3, 800252c <__sinit+0x14>
 8002524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002528:	f7ff bff0 	b.w	800250c <__sfp_lock_release>
 800252c:	4b04      	ldr	r3, [pc, #16]	; (8002540 <__sinit+0x28>)
 800252e:	6223      	str	r3, [r4, #32]
 8002530:	4b04      	ldr	r3, [pc, #16]	; (8002544 <__sinit+0x2c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1f5      	bne.n	8002524 <__sinit+0xc>
 8002538:	f7ff ffc4 	bl	80024c4 <global_stdio_init.part.0>
 800253c:	e7f2      	b.n	8002524 <__sinit+0xc>
 800253e:	bf00      	nop
 8002540:	08002485 	.word	0x08002485
 8002544:	20000208 	.word	0x20000208

08002548 <_fwalk_sglue>:
 8002548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800254c:	4607      	mov	r7, r0
 800254e:	4688      	mov	r8, r1
 8002550:	4614      	mov	r4, r2
 8002552:	2600      	movs	r6, #0
 8002554:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002558:	f1b9 0901 	subs.w	r9, r9, #1
 800255c:	d505      	bpl.n	800256a <_fwalk_sglue+0x22>
 800255e:	6824      	ldr	r4, [r4, #0]
 8002560:	2c00      	cmp	r4, #0
 8002562:	d1f7      	bne.n	8002554 <_fwalk_sglue+0xc>
 8002564:	4630      	mov	r0, r6
 8002566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800256a:	89ab      	ldrh	r3, [r5, #12]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d907      	bls.n	8002580 <_fwalk_sglue+0x38>
 8002570:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002574:	3301      	adds	r3, #1
 8002576:	d003      	beq.n	8002580 <_fwalk_sglue+0x38>
 8002578:	4629      	mov	r1, r5
 800257a:	4638      	mov	r0, r7
 800257c:	47c0      	blx	r8
 800257e:	4306      	orrs	r6, r0
 8002580:	3568      	adds	r5, #104	; 0x68
 8002582:	e7e9      	b.n	8002558 <_fwalk_sglue+0x10>

08002584 <__sread>:
 8002584:	b510      	push	{r4, lr}
 8002586:	460c      	mov	r4, r1
 8002588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800258c:	f000 f868 	bl	8002660 <_read_r>
 8002590:	2800      	cmp	r0, #0
 8002592:	bfab      	itete	ge
 8002594:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002596:	89a3      	ldrhlt	r3, [r4, #12]
 8002598:	181b      	addge	r3, r3, r0
 800259a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800259e:	bfac      	ite	ge
 80025a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80025a2:	81a3      	strhlt	r3, [r4, #12]
 80025a4:	bd10      	pop	{r4, pc}

080025a6 <__swrite>:
 80025a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025aa:	461f      	mov	r7, r3
 80025ac:	898b      	ldrh	r3, [r1, #12]
 80025ae:	05db      	lsls	r3, r3, #23
 80025b0:	4605      	mov	r5, r0
 80025b2:	460c      	mov	r4, r1
 80025b4:	4616      	mov	r6, r2
 80025b6:	d505      	bpl.n	80025c4 <__swrite+0x1e>
 80025b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025bc:	2302      	movs	r3, #2
 80025be:	2200      	movs	r2, #0
 80025c0:	f000 f83c 	bl	800263c <_lseek_r>
 80025c4:	89a3      	ldrh	r3, [r4, #12]
 80025c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80025ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025ce:	81a3      	strh	r3, [r4, #12]
 80025d0:	4632      	mov	r2, r6
 80025d2:	463b      	mov	r3, r7
 80025d4:	4628      	mov	r0, r5
 80025d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80025da:	f000 b853 	b.w	8002684 <_write_r>

080025de <__sseek>:
 80025de:	b510      	push	{r4, lr}
 80025e0:	460c      	mov	r4, r1
 80025e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025e6:	f000 f829 	bl	800263c <_lseek_r>
 80025ea:	1c43      	adds	r3, r0, #1
 80025ec:	89a3      	ldrh	r3, [r4, #12]
 80025ee:	bf15      	itete	ne
 80025f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80025f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80025f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80025fa:	81a3      	strheq	r3, [r4, #12]
 80025fc:	bf18      	it	ne
 80025fe:	81a3      	strhne	r3, [r4, #12]
 8002600:	bd10      	pop	{r4, pc}

08002602 <__sclose>:
 8002602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002606:	f000 b809 	b.w	800261c <_close_r>

0800260a <memset>:
 800260a:	4402      	add	r2, r0
 800260c:	4603      	mov	r3, r0
 800260e:	4293      	cmp	r3, r2
 8002610:	d100      	bne.n	8002614 <memset+0xa>
 8002612:	4770      	bx	lr
 8002614:	f803 1b01 	strb.w	r1, [r3], #1
 8002618:	e7f9      	b.n	800260e <memset+0x4>
	...

0800261c <_close_r>:
 800261c:	b538      	push	{r3, r4, r5, lr}
 800261e:	4d06      	ldr	r5, [pc, #24]	; (8002638 <_close_r+0x1c>)
 8002620:	2300      	movs	r3, #0
 8002622:	4604      	mov	r4, r0
 8002624:	4608      	mov	r0, r1
 8002626:	602b      	str	r3, [r5, #0]
 8002628:	f7fe fa67 	bl	8000afa <_close>
 800262c:	1c43      	adds	r3, r0, #1
 800262e:	d102      	bne.n	8002636 <_close_r+0x1a>
 8002630:	682b      	ldr	r3, [r5, #0]
 8002632:	b103      	cbz	r3, 8002636 <_close_r+0x1a>
 8002634:	6023      	str	r3, [r4, #0]
 8002636:	bd38      	pop	{r3, r4, r5, pc}
 8002638:	2000020c 	.word	0x2000020c

0800263c <_lseek_r>:
 800263c:	b538      	push	{r3, r4, r5, lr}
 800263e:	4d07      	ldr	r5, [pc, #28]	; (800265c <_lseek_r+0x20>)
 8002640:	4604      	mov	r4, r0
 8002642:	4608      	mov	r0, r1
 8002644:	4611      	mov	r1, r2
 8002646:	2200      	movs	r2, #0
 8002648:	602a      	str	r2, [r5, #0]
 800264a:	461a      	mov	r2, r3
 800264c:	f7fe fa7c 	bl	8000b48 <_lseek>
 8002650:	1c43      	adds	r3, r0, #1
 8002652:	d102      	bne.n	800265a <_lseek_r+0x1e>
 8002654:	682b      	ldr	r3, [r5, #0]
 8002656:	b103      	cbz	r3, 800265a <_lseek_r+0x1e>
 8002658:	6023      	str	r3, [r4, #0]
 800265a:	bd38      	pop	{r3, r4, r5, pc}
 800265c:	2000020c 	.word	0x2000020c

08002660 <_read_r>:
 8002660:	b538      	push	{r3, r4, r5, lr}
 8002662:	4d07      	ldr	r5, [pc, #28]	; (8002680 <_read_r+0x20>)
 8002664:	4604      	mov	r4, r0
 8002666:	4608      	mov	r0, r1
 8002668:	4611      	mov	r1, r2
 800266a:	2200      	movs	r2, #0
 800266c:	602a      	str	r2, [r5, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	f7fe fa0a 	bl	8000a88 <_read>
 8002674:	1c43      	adds	r3, r0, #1
 8002676:	d102      	bne.n	800267e <_read_r+0x1e>
 8002678:	682b      	ldr	r3, [r5, #0]
 800267a:	b103      	cbz	r3, 800267e <_read_r+0x1e>
 800267c:	6023      	str	r3, [r4, #0]
 800267e:	bd38      	pop	{r3, r4, r5, pc}
 8002680:	2000020c 	.word	0x2000020c

08002684 <_write_r>:
 8002684:	b538      	push	{r3, r4, r5, lr}
 8002686:	4d07      	ldr	r5, [pc, #28]	; (80026a4 <_write_r+0x20>)
 8002688:	4604      	mov	r4, r0
 800268a:	4608      	mov	r0, r1
 800268c:	4611      	mov	r1, r2
 800268e:	2200      	movs	r2, #0
 8002690:	602a      	str	r2, [r5, #0]
 8002692:	461a      	mov	r2, r3
 8002694:	f7fe fa15 	bl	8000ac2 <_write>
 8002698:	1c43      	adds	r3, r0, #1
 800269a:	d102      	bne.n	80026a2 <_write_r+0x1e>
 800269c:	682b      	ldr	r3, [r5, #0]
 800269e:	b103      	cbz	r3, 80026a2 <_write_r+0x1e>
 80026a0:	6023      	str	r3, [r4, #0]
 80026a2:	bd38      	pop	{r3, r4, r5, pc}
 80026a4:	2000020c 	.word	0x2000020c

080026a8 <__errno>:
 80026a8:	4b01      	ldr	r3, [pc, #4]	; (80026b0 <__errno+0x8>)
 80026aa:	6818      	ldr	r0, [r3, #0]
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	20000064 	.word	0x20000064

080026b4 <__libc_init_array>:
 80026b4:	b570      	push	{r4, r5, r6, lr}
 80026b6:	4d0d      	ldr	r5, [pc, #52]	; (80026ec <__libc_init_array+0x38>)
 80026b8:	4c0d      	ldr	r4, [pc, #52]	; (80026f0 <__libc_init_array+0x3c>)
 80026ba:	1b64      	subs	r4, r4, r5
 80026bc:	10a4      	asrs	r4, r4, #2
 80026be:	2600      	movs	r6, #0
 80026c0:	42a6      	cmp	r6, r4
 80026c2:	d109      	bne.n	80026d8 <__libc_init_array+0x24>
 80026c4:	4d0b      	ldr	r5, [pc, #44]	; (80026f4 <__libc_init_array+0x40>)
 80026c6:	4c0c      	ldr	r4, [pc, #48]	; (80026f8 <__libc_init_array+0x44>)
 80026c8:	f000 fe40 	bl	800334c <_init>
 80026cc:	1b64      	subs	r4, r4, r5
 80026ce:	10a4      	asrs	r4, r4, #2
 80026d0:	2600      	movs	r6, #0
 80026d2:	42a6      	cmp	r6, r4
 80026d4:	d105      	bne.n	80026e2 <__libc_init_array+0x2e>
 80026d6:	bd70      	pop	{r4, r5, r6, pc}
 80026d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80026dc:	4798      	blx	r3
 80026de:	3601      	adds	r6, #1
 80026e0:	e7ee      	b.n	80026c0 <__libc_init_array+0xc>
 80026e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80026e6:	4798      	blx	r3
 80026e8:	3601      	adds	r6, #1
 80026ea:	e7f2      	b.n	80026d2 <__libc_init_array+0x1e>
 80026ec:	08003464 	.word	0x08003464
 80026f0:	08003464 	.word	0x08003464
 80026f4:	08003464 	.word	0x08003464
 80026f8:	08003468 	.word	0x08003468

080026fc <__retarget_lock_acquire_recursive>:
 80026fc:	4770      	bx	lr

080026fe <__retarget_lock_release_recursive>:
 80026fe:	4770      	bx	lr

08002700 <__assert_func>:
 8002700:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002702:	4614      	mov	r4, r2
 8002704:	461a      	mov	r2, r3
 8002706:	4b09      	ldr	r3, [pc, #36]	; (800272c <__assert_func+0x2c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4605      	mov	r5, r0
 800270c:	68d8      	ldr	r0, [r3, #12]
 800270e:	b14c      	cbz	r4, 8002724 <__assert_func+0x24>
 8002710:	4b07      	ldr	r3, [pc, #28]	; (8002730 <__assert_func+0x30>)
 8002712:	9100      	str	r1, [sp, #0]
 8002714:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002718:	4906      	ldr	r1, [pc, #24]	; (8002734 <__assert_func+0x34>)
 800271a:	462b      	mov	r3, r5
 800271c:	f000 f9bc 	bl	8002a98 <fiprintf>
 8002720:	f000 f9dc 	bl	8002adc <abort>
 8002724:	4b04      	ldr	r3, [pc, #16]	; (8002738 <__assert_func+0x38>)
 8002726:	461c      	mov	r4, r3
 8002728:	e7f3      	b.n	8002712 <__assert_func+0x12>
 800272a:	bf00      	nop
 800272c:	20000064 	.word	0x20000064
 8002730:	080033eb 	.word	0x080033eb
 8002734:	080033f8 	.word	0x080033f8
 8002738:	08003426 	.word	0x08003426

0800273c <_free_r>:
 800273c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800273e:	2900      	cmp	r1, #0
 8002740:	d044      	beq.n	80027cc <_free_r+0x90>
 8002742:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002746:	9001      	str	r0, [sp, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	f1a1 0404 	sub.w	r4, r1, #4
 800274e:	bfb8      	it	lt
 8002750:	18e4      	addlt	r4, r4, r3
 8002752:	f000 f8e7 	bl	8002924 <__malloc_lock>
 8002756:	4a1e      	ldr	r2, [pc, #120]	; (80027d0 <_free_r+0x94>)
 8002758:	9801      	ldr	r0, [sp, #4]
 800275a:	6813      	ldr	r3, [r2, #0]
 800275c:	b933      	cbnz	r3, 800276c <_free_r+0x30>
 800275e:	6063      	str	r3, [r4, #4]
 8002760:	6014      	str	r4, [r2, #0]
 8002762:	b003      	add	sp, #12
 8002764:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002768:	f000 b8e2 	b.w	8002930 <__malloc_unlock>
 800276c:	42a3      	cmp	r3, r4
 800276e:	d908      	bls.n	8002782 <_free_r+0x46>
 8002770:	6825      	ldr	r5, [r4, #0]
 8002772:	1961      	adds	r1, r4, r5
 8002774:	428b      	cmp	r3, r1
 8002776:	bf01      	itttt	eq
 8002778:	6819      	ldreq	r1, [r3, #0]
 800277a:	685b      	ldreq	r3, [r3, #4]
 800277c:	1949      	addeq	r1, r1, r5
 800277e:	6021      	streq	r1, [r4, #0]
 8002780:	e7ed      	b.n	800275e <_free_r+0x22>
 8002782:	461a      	mov	r2, r3
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	b10b      	cbz	r3, 800278c <_free_r+0x50>
 8002788:	42a3      	cmp	r3, r4
 800278a:	d9fa      	bls.n	8002782 <_free_r+0x46>
 800278c:	6811      	ldr	r1, [r2, #0]
 800278e:	1855      	adds	r5, r2, r1
 8002790:	42a5      	cmp	r5, r4
 8002792:	d10b      	bne.n	80027ac <_free_r+0x70>
 8002794:	6824      	ldr	r4, [r4, #0]
 8002796:	4421      	add	r1, r4
 8002798:	1854      	adds	r4, r2, r1
 800279a:	42a3      	cmp	r3, r4
 800279c:	6011      	str	r1, [r2, #0]
 800279e:	d1e0      	bne.n	8002762 <_free_r+0x26>
 80027a0:	681c      	ldr	r4, [r3, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	6053      	str	r3, [r2, #4]
 80027a6:	440c      	add	r4, r1
 80027a8:	6014      	str	r4, [r2, #0]
 80027aa:	e7da      	b.n	8002762 <_free_r+0x26>
 80027ac:	d902      	bls.n	80027b4 <_free_r+0x78>
 80027ae:	230c      	movs	r3, #12
 80027b0:	6003      	str	r3, [r0, #0]
 80027b2:	e7d6      	b.n	8002762 <_free_r+0x26>
 80027b4:	6825      	ldr	r5, [r4, #0]
 80027b6:	1961      	adds	r1, r4, r5
 80027b8:	428b      	cmp	r3, r1
 80027ba:	bf04      	itt	eq
 80027bc:	6819      	ldreq	r1, [r3, #0]
 80027be:	685b      	ldreq	r3, [r3, #4]
 80027c0:	6063      	str	r3, [r4, #4]
 80027c2:	bf04      	itt	eq
 80027c4:	1949      	addeq	r1, r1, r5
 80027c6:	6021      	streq	r1, [r4, #0]
 80027c8:	6054      	str	r4, [r2, #4]
 80027ca:	e7ca      	b.n	8002762 <_free_r+0x26>
 80027cc:	b003      	add	sp, #12
 80027ce:	bd30      	pop	{r4, r5, pc}
 80027d0:	20000214 	.word	0x20000214

080027d4 <malloc>:
 80027d4:	4b02      	ldr	r3, [pc, #8]	; (80027e0 <malloc+0xc>)
 80027d6:	4601      	mov	r1, r0
 80027d8:	6818      	ldr	r0, [r3, #0]
 80027da:	f000 b823 	b.w	8002824 <_malloc_r>
 80027de:	bf00      	nop
 80027e0:	20000064 	.word	0x20000064

080027e4 <sbrk_aligned>:
 80027e4:	b570      	push	{r4, r5, r6, lr}
 80027e6:	4e0e      	ldr	r6, [pc, #56]	; (8002820 <sbrk_aligned+0x3c>)
 80027e8:	460c      	mov	r4, r1
 80027ea:	6831      	ldr	r1, [r6, #0]
 80027ec:	4605      	mov	r5, r0
 80027ee:	b911      	cbnz	r1, 80027f6 <sbrk_aligned+0x12>
 80027f0:	f000 f964 	bl	8002abc <_sbrk_r>
 80027f4:	6030      	str	r0, [r6, #0]
 80027f6:	4621      	mov	r1, r4
 80027f8:	4628      	mov	r0, r5
 80027fa:	f000 f95f 	bl	8002abc <_sbrk_r>
 80027fe:	1c43      	adds	r3, r0, #1
 8002800:	d00a      	beq.n	8002818 <sbrk_aligned+0x34>
 8002802:	1cc4      	adds	r4, r0, #3
 8002804:	f024 0403 	bic.w	r4, r4, #3
 8002808:	42a0      	cmp	r0, r4
 800280a:	d007      	beq.n	800281c <sbrk_aligned+0x38>
 800280c:	1a21      	subs	r1, r4, r0
 800280e:	4628      	mov	r0, r5
 8002810:	f000 f954 	bl	8002abc <_sbrk_r>
 8002814:	3001      	adds	r0, #1
 8002816:	d101      	bne.n	800281c <sbrk_aligned+0x38>
 8002818:	f04f 34ff 	mov.w	r4, #4294967295
 800281c:	4620      	mov	r0, r4
 800281e:	bd70      	pop	{r4, r5, r6, pc}
 8002820:	20000218 	.word	0x20000218

08002824 <_malloc_r>:
 8002824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002828:	1ccd      	adds	r5, r1, #3
 800282a:	f025 0503 	bic.w	r5, r5, #3
 800282e:	3508      	adds	r5, #8
 8002830:	2d0c      	cmp	r5, #12
 8002832:	bf38      	it	cc
 8002834:	250c      	movcc	r5, #12
 8002836:	2d00      	cmp	r5, #0
 8002838:	4607      	mov	r7, r0
 800283a:	db01      	blt.n	8002840 <_malloc_r+0x1c>
 800283c:	42a9      	cmp	r1, r5
 800283e:	d905      	bls.n	800284c <_malloc_r+0x28>
 8002840:	230c      	movs	r3, #12
 8002842:	603b      	str	r3, [r7, #0]
 8002844:	2600      	movs	r6, #0
 8002846:	4630      	mov	r0, r6
 8002848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800284c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002920 <_malloc_r+0xfc>
 8002850:	f000 f868 	bl	8002924 <__malloc_lock>
 8002854:	f8d8 3000 	ldr.w	r3, [r8]
 8002858:	461c      	mov	r4, r3
 800285a:	bb5c      	cbnz	r4, 80028b4 <_malloc_r+0x90>
 800285c:	4629      	mov	r1, r5
 800285e:	4638      	mov	r0, r7
 8002860:	f7ff ffc0 	bl	80027e4 <sbrk_aligned>
 8002864:	1c43      	adds	r3, r0, #1
 8002866:	4604      	mov	r4, r0
 8002868:	d155      	bne.n	8002916 <_malloc_r+0xf2>
 800286a:	f8d8 4000 	ldr.w	r4, [r8]
 800286e:	4626      	mov	r6, r4
 8002870:	2e00      	cmp	r6, #0
 8002872:	d145      	bne.n	8002900 <_malloc_r+0xdc>
 8002874:	2c00      	cmp	r4, #0
 8002876:	d048      	beq.n	800290a <_malloc_r+0xe6>
 8002878:	6823      	ldr	r3, [r4, #0]
 800287a:	4631      	mov	r1, r6
 800287c:	4638      	mov	r0, r7
 800287e:	eb04 0903 	add.w	r9, r4, r3
 8002882:	f000 f91b 	bl	8002abc <_sbrk_r>
 8002886:	4581      	cmp	r9, r0
 8002888:	d13f      	bne.n	800290a <_malloc_r+0xe6>
 800288a:	6821      	ldr	r1, [r4, #0]
 800288c:	1a6d      	subs	r5, r5, r1
 800288e:	4629      	mov	r1, r5
 8002890:	4638      	mov	r0, r7
 8002892:	f7ff ffa7 	bl	80027e4 <sbrk_aligned>
 8002896:	3001      	adds	r0, #1
 8002898:	d037      	beq.n	800290a <_malloc_r+0xe6>
 800289a:	6823      	ldr	r3, [r4, #0]
 800289c:	442b      	add	r3, r5
 800289e:	6023      	str	r3, [r4, #0]
 80028a0:	f8d8 3000 	ldr.w	r3, [r8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d038      	beq.n	800291a <_malloc_r+0xf6>
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	42a2      	cmp	r2, r4
 80028ac:	d12b      	bne.n	8002906 <_malloc_r+0xe2>
 80028ae:	2200      	movs	r2, #0
 80028b0:	605a      	str	r2, [r3, #4]
 80028b2:	e00f      	b.n	80028d4 <_malloc_r+0xb0>
 80028b4:	6822      	ldr	r2, [r4, #0]
 80028b6:	1b52      	subs	r2, r2, r5
 80028b8:	d41f      	bmi.n	80028fa <_malloc_r+0xd6>
 80028ba:	2a0b      	cmp	r2, #11
 80028bc:	d917      	bls.n	80028ee <_malloc_r+0xca>
 80028be:	1961      	adds	r1, r4, r5
 80028c0:	42a3      	cmp	r3, r4
 80028c2:	6025      	str	r5, [r4, #0]
 80028c4:	bf18      	it	ne
 80028c6:	6059      	strne	r1, [r3, #4]
 80028c8:	6863      	ldr	r3, [r4, #4]
 80028ca:	bf08      	it	eq
 80028cc:	f8c8 1000 	streq.w	r1, [r8]
 80028d0:	5162      	str	r2, [r4, r5]
 80028d2:	604b      	str	r3, [r1, #4]
 80028d4:	4638      	mov	r0, r7
 80028d6:	f104 060b 	add.w	r6, r4, #11
 80028da:	f000 f829 	bl	8002930 <__malloc_unlock>
 80028de:	f026 0607 	bic.w	r6, r6, #7
 80028e2:	1d23      	adds	r3, r4, #4
 80028e4:	1af2      	subs	r2, r6, r3
 80028e6:	d0ae      	beq.n	8002846 <_malloc_r+0x22>
 80028e8:	1b9b      	subs	r3, r3, r6
 80028ea:	50a3      	str	r3, [r4, r2]
 80028ec:	e7ab      	b.n	8002846 <_malloc_r+0x22>
 80028ee:	42a3      	cmp	r3, r4
 80028f0:	6862      	ldr	r2, [r4, #4]
 80028f2:	d1dd      	bne.n	80028b0 <_malloc_r+0x8c>
 80028f4:	f8c8 2000 	str.w	r2, [r8]
 80028f8:	e7ec      	b.n	80028d4 <_malloc_r+0xb0>
 80028fa:	4623      	mov	r3, r4
 80028fc:	6864      	ldr	r4, [r4, #4]
 80028fe:	e7ac      	b.n	800285a <_malloc_r+0x36>
 8002900:	4634      	mov	r4, r6
 8002902:	6876      	ldr	r6, [r6, #4]
 8002904:	e7b4      	b.n	8002870 <_malloc_r+0x4c>
 8002906:	4613      	mov	r3, r2
 8002908:	e7cc      	b.n	80028a4 <_malloc_r+0x80>
 800290a:	230c      	movs	r3, #12
 800290c:	603b      	str	r3, [r7, #0]
 800290e:	4638      	mov	r0, r7
 8002910:	f000 f80e 	bl	8002930 <__malloc_unlock>
 8002914:	e797      	b.n	8002846 <_malloc_r+0x22>
 8002916:	6025      	str	r5, [r4, #0]
 8002918:	e7dc      	b.n	80028d4 <_malloc_r+0xb0>
 800291a:	605b      	str	r3, [r3, #4]
 800291c:	deff      	udf	#255	; 0xff
 800291e:	bf00      	nop
 8002920:	20000214 	.word	0x20000214

08002924 <__malloc_lock>:
 8002924:	4801      	ldr	r0, [pc, #4]	; (800292c <__malloc_lock+0x8>)
 8002926:	f7ff bee9 	b.w	80026fc <__retarget_lock_acquire_recursive>
 800292a:	bf00      	nop
 800292c:	20000210 	.word	0x20000210

08002930 <__malloc_unlock>:
 8002930:	4801      	ldr	r0, [pc, #4]	; (8002938 <__malloc_unlock+0x8>)
 8002932:	f7ff bee4 	b.w	80026fe <__retarget_lock_release_recursive>
 8002936:	bf00      	nop
 8002938:	20000210 	.word	0x20000210

0800293c <__sflush_r>:
 800293c:	898a      	ldrh	r2, [r1, #12]
 800293e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002942:	4605      	mov	r5, r0
 8002944:	0710      	lsls	r0, r2, #28
 8002946:	460c      	mov	r4, r1
 8002948:	d458      	bmi.n	80029fc <__sflush_r+0xc0>
 800294a:	684b      	ldr	r3, [r1, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	dc05      	bgt.n	800295c <__sflush_r+0x20>
 8002950:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002952:	2b00      	cmp	r3, #0
 8002954:	dc02      	bgt.n	800295c <__sflush_r+0x20>
 8002956:	2000      	movs	r0, #0
 8002958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800295c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800295e:	2e00      	cmp	r6, #0
 8002960:	d0f9      	beq.n	8002956 <__sflush_r+0x1a>
 8002962:	2300      	movs	r3, #0
 8002964:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002968:	682f      	ldr	r7, [r5, #0]
 800296a:	6a21      	ldr	r1, [r4, #32]
 800296c:	602b      	str	r3, [r5, #0]
 800296e:	d032      	beq.n	80029d6 <__sflush_r+0x9a>
 8002970:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002972:	89a3      	ldrh	r3, [r4, #12]
 8002974:	075a      	lsls	r2, r3, #29
 8002976:	d505      	bpl.n	8002984 <__sflush_r+0x48>
 8002978:	6863      	ldr	r3, [r4, #4]
 800297a:	1ac0      	subs	r0, r0, r3
 800297c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800297e:	b10b      	cbz	r3, 8002984 <__sflush_r+0x48>
 8002980:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002982:	1ac0      	subs	r0, r0, r3
 8002984:	2300      	movs	r3, #0
 8002986:	4602      	mov	r2, r0
 8002988:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800298a:	6a21      	ldr	r1, [r4, #32]
 800298c:	4628      	mov	r0, r5
 800298e:	47b0      	blx	r6
 8002990:	1c43      	adds	r3, r0, #1
 8002992:	89a3      	ldrh	r3, [r4, #12]
 8002994:	d106      	bne.n	80029a4 <__sflush_r+0x68>
 8002996:	6829      	ldr	r1, [r5, #0]
 8002998:	291d      	cmp	r1, #29
 800299a:	d82b      	bhi.n	80029f4 <__sflush_r+0xb8>
 800299c:	4a29      	ldr	r2, [pc, #164]	; (8002a44 <__sflush_r+0x108>)
 800299e:	410a      	asrs	r2, r1
 80029a0:	07d6      	lsls	r6, r2, #31
 80029a2:	d427      	bmi.n	80029f4 <__sflush_r+0xb8>
 80029a4:	2200      	movs	r2, #0
 80029a6:	6062      	str	r2, [r4, #4]
 80029a8:	04d9      	lsls	r1, r3, #19
 80029aa:	6922      	ldr	r2, [r4, #16]
 80029ac:	6022      	str	r2, [r4, #0]
 80029ae:	d504      	bpl.n	80029ba <__sflush_r+0x7e>
 80029b0:	1c42      	adds	r2, r0, #1
 80029b2:	d101      	bne.n	80029b8 <__sflush_r+0x7c>
 80029b4:	682b      	ldr	r3, [r5, #0]
 80029b6:	b903      	cbnz	r3, 80029ba <__sflush_r+0x7e>
 80029b8:	6560      	str	r0, [r4, #84]	; 0x54
 80029ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80029bc:	602f      	str	r7, [r5, #0]
 80029be:	2900      	cmp	r1, #0
 80029c0:	d0c9      	beq.n	8002956 <__sflush_r+0x1a>
 80029c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80029c6:	4299      	cmp	r1, r3
 80029c8:	d002      	beq.n	80029d0 <__sflush_r+0x94>
 80029ca:	4628      	mov	r0, r5
 80029cc:	f7ff feb6 	bl	800273c <_free_r>
 80029d0:	2000      	movs	r0, #0
 80029d2:	6360      	str	r0, [r4, #52]	; 0x34
 80029d4:	e7c0      	b.n	8002958 <__sflush_r+0x1c>
 80029d6:	2301      	movs	r3, #1
 80029d8:	4628      	mov	r0, r5
 80029da:	47b0      	blx	r6
 80029dc:	1c41      	adds	r1, r0, #1
 80029de:	d1c8      	bne.n	8002972 <__sflush_r+0x36>
 80029e0:	682b      	ldr	r3, [r5, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0c5      	beq.n	8002972 <__sflush_r+0x36>
 80029e6:	2b1d      	cmp	r3, #29
 80029e8:	d001      	beq.n	80029ee <__sflush_r+0xb2>
 80029ea:	2b16      	cmp	r3, #22
 80029ec:	d101      	bne.n	80029f2 <__sflush_r+0xb6>
 80029ee:	602f      	str	r7, [r5, #0]
 80029f0:	e7b1      	b.n	8002956 <__sflush_r+0x1a>
 80029f2:	89a3      	ldrh	r3, [r4, #12]
 80029f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029f8:	81a3      	strh	r3, [r4, #12]
 80029fa:	e7ad      	b.n	8002958 <__sflush_r+0x1c>
 80029fc:	690f      	ldr	r7, [r1, #16]
 80029fe:	2f00      	cmp	r7, #0
 8002a00:	d0a9      	beq.n	8002956 <__sflush_r+0x1a>
 8002a02:	0793      	lsls	r3, r2, #30
 8002a04:	680e      	ldr	r6, [r1, #0]
 8002a06:	bf08      	it	eq
 8002a08:	694b      	ldreq	r3, [r1, #20]
 8002a0a:	600f      	str	r7, [r1, #0]
 8002a0c:	bf18      	it	ne
 8002a0e:	2300      	movne	r3, #0
 8002a10:	eba6 0807 	sub.w	r8, r6, r7
 8002a14:	608b      	str	r3, [r1, #8]
 8002a16:	f1b8 0f00 	cmp.w	r8, #0
 8002a1a:	dd9c      	ble.n	8002956 <__sflush_r+0x1a>
 8002a1c:	6a21      	ldr	r1, [r4, #32]
 8002a1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002a20:	4643      	mov	r3, r8
 8002a22:	463a      	mov	r2, r7
 8002a24:	4628      	mov	r0, r5
 8002a26:	47b0      	blx	r6
 8002a28:	2800      	cmp	r0, #0
 8002a2a:	dc06      	bgt.n	8002a3a <__sflush_r+0xfe>
 8002a2c:	89a3      	ldrh	r3, [r4, #12]
 8002a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a32:	81a3      	strh	r3, [r4, #12]
 8002a34:	f04f 30ff 	mov.w	r0, #4294967295
 8002a38:	e78e      	b.n	8002958 <__sflush_r+0x1c>
 8002a3a:	4407      	add	r7, r0
 8002a3c:	eba8 0800 	sub.w	r8, r8, r0
 8002a40:	e7e9      	b.n	8002a16 <__sflush_r+0xda>
 8002a42:	bf00      	nop
 8002a44:	dfbffffe 	.word	0xdfbffffe

08002a48 <_fflush_r>:
 8002a48:	b538      	push	{r3, r4, r5, lr}
 8002a4a:	690b      	ldr	r3, [r1, #16]
 8002a4c:	4605      	mov	r5, r0
 8002a4e:	460c      	mov	r4, r1
 8002a50:	b913      	cbnz	r3, 8002a58 <_fflush_r+0x10>
 8002a52:	2500      	movs	r5, #0
 8002a54:	4628      	mov	r0, r5
 8002a56:	bd38      	pop	{r3, r4, r5, pc}
 8002a58:	b118      	cbz	r0, 8002a62 <_fflush_r+0x1a>
 8002a5a:	6a03      	ldr	r3, [r0, #32]
 8002a5c:	b90b      	cbnz	r3, 8002a62 <_fflush_r+0x1a>
 8002a5e:	f7ff fd5b 	bl	8002518 <__sinit>
 8002a62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f3      	beq.n	8002a52 <_fflush_r+0xa>
 8002a6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002a6c:	07d0      	lsls	r0, r2, #31
 8002a6e:	d404      	bmi.n	8002a7a <_fflush_r+0x32>
 8002a70:	0599      	lsls	r1, r3, #22
 8002a72:	d402      	bmi.n	8002a7a <_fflush_r+0x32>
 8002a74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a76:	f7ff fe41 	bl	80026fc <__retarget_lock_acquire_recursive>
 8002a7a:	4628      	mov	r0, r5
 8002a7c:	4621      	mov	r1, r4
 8002a7e:	f7ff ff5d 	bl	800293c <__sflush_r>
 8002a82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a84:	07da      	lsls	r2, r3, #31
 8002a86:	4605      	mov	r5, r0
 8002a88:	d4e4      	bmi.n	8002a54 <_fflush_r+0xc>
 8002a8a:	89a3      	ldrh	r3, [r4, #12]
 8002a8c:	059b      	lsls	r3, r3, #22
 8002a8e:	d4e1      	bmi.n	8002a54 <_fflush_r+0xc>
 8002a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a92:	f7ff fe34 	bl	80026fe <__retarget_lock_release_recursive>
 8002a96:	e7dd      	b.n	8002a54 <_fflush_r+0xc>

08002a98 <fiprintf>:
 8002a98:	b40e      	push	{r1, r2, r3}
 8002a9a:	b503      	push	{r0, r1, lr}
 8002a9c:	4601      	mov	r1, r0
 8002a9e:	ab03      	add	r3, sp, #12
 8002aa0:	4805      	ldr	r0, [pc, #20]	; (8002ab8 <fiprintf+0x20>)
 8002aa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8002aa6:	6800      	ldr	r0, [r0, #0]
 8002aa8:	9301      	str	r3, [sp, #4]
 8002aaa:	f000 f847 	bl	8002b3c <_vfiprintf_r>
 8002aae:	b002      	add	sp, #8
 8002ab0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ab4:	b003      	add	sp, #12
 8002ab6:	4770      	bx	lr
 8002ab8:	20000064 	.word	0x20000064

08002abc <_sbrk_r>:
 8002abc:	b538      	push	{r3, r4, r5, lr}
 8002abe:	4d06      	ldr	r5, [pc, #24]	; (8002ad8 <_sbrk_r+0x1c>)
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	4604      	mov	r4, r0
 8002ac4:	4608      	mov	r0, r1
 8002ac6:	602b      	str	r3, [r5, #0]
 8002ac8:	f7fe f84c 	bl	8000b64 <_sbrk>
 8002acc:	1c43      	adds	r3, r0, #1
 8002ace:	d102      	bne.n	8002ad6 <_sbrk_r+0x1a>
 8002ad0:	682b      	ldr	r3, [r5, #0]
 8002ad2:	b103      	cbz	r3, 8002ad6 <_sbrk_r+0x1a>
 8002ad4:	6023      	str	r3, [r4, #0]
 8002ad6:	bd38      	pop	{r3, r4, r5, pc}
 8002ad8:	2000020c 	.word	0x2000020c

08002adc <abort>:
 8002adc:	b508      	push	{r3, lr}
 8002ade:	2006      	movs	r0, #6
 8002ae0:	f000 fb94 	bl	800320c <raise>
 8002ae4:	2001      	movs	r0, #1
 8002ae6:	f7fd ffc5 	bl	8000a74 <_exit>

08002aea <__sfputc_r>:
 8002aea:	6893      	ldr	r3, [r2, #8]
 8002aec:	3b01      	subs	r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	b410      	push	{r4}
 8002af2:	6093      	str	r3, [r2, #8]
 8002af4:	da08      	bge.n	8002b08 <__sfputc_r+0x1e>
 8002af6:	6994      	ldr	r4, [r2, #24]
 8002af8:	42a3      	cmp	r3, r4
 8002afa:	db01      	blt.n	8002b00 <__sfputc_r+0x16>
 8002afc:	290a      	cmp	r1, #10
 8002afe:	d103      	bne.n	8002b08 <__sfputc_r+0x1e>
 8002b00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b04:	f000 bac4 	b.w	8003090 <__swbuf_r>
 8002b08:	6813      	ldr	r3, [r2, #0]
 8002b0a:	1c58      	adds	r0, r3, #1
 8002b0c:	6010      	str	r0, [r2, #0]
 8002b0e:	7019      	strb	r1, [r3, #0]
 8002b10:	4608      	mov	r0, r1
 8002b12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <__sfputs_r>:
 8002b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1a:	4606      	mov	r6, r0
 8002b1c:	460f      	mov	r7, r1
 8002b1e:	4614      	mov	r4, r2
 8002b20:	18d5      	adds	r5, r2, r3
 8002b22:	42ac      	cmp	r4, r5
 8002b24:	d101      	bne.n	8002b2a <__sfputs_r+0x12>
 8002b26:	2000      	movs	r0, #0
 8002b28:	e007      	b.n	8002b3a <__sfputs_r+0x22>
 8002b2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b2e:	463a      	mov	r2, r7
 8002b30:	4630      	mov	r0, r6
 8002b32:	f7ff ffda 	bl	8002aea <__sfputc_r>
 8002b36:	1c43      	adds	r3, r0, #1
 8002b38:	d1f3      	bne.n	8002b22 <__sfputs_r+0xa>
 8002b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002b3c <_vfiprintf_r>:
 8002b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b40:	460d      	mov	r5, r1
 8002b42:	b09d      	sub	sp, #116	; 0x74
 8002b44:	4614      	mov	r4, r2
 8002b46:	4698      	mov	r8, r3
 8002b48:	4606      	mov	r6, r0
 8002b4a:	b118      	cbz	r0, 8002b54 <_vfiprintf_r+0x18>
 8002b4c:	6a03      	ldr	r3, [r0, #32]
 8002b4e:	b90b      	cbnz	r3, 8002b54 <_vfiprintf_r+0x18>
 8002b50:	f7ff fce2 	bl	8002518 <__sinit>
 8002b54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b56:	07d9      	lsls	r1, r3, #31
 8002b58:	d405      	bmi.n	8002b66 <_vfiprintf_r+0x2a>
 8002b5a:	89ab      	ldrh	r3, [r5, #12]
 8002b5c:	059a      	lsls	r2, r3, #22
 8002b5e:	d402      	bmi.n	8002b66 <_vfiprintf_r+0x2a>
 8002b60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b62:	f7ff fdcb 	bl	80026fc <__retarget_lock_acquire_recursive>
 8002b66:	89ab      	ldrh	r3, [r5, #12]
 8002b68:	071b      	lsls	r3, r3, #28
 8002b6a:	d501      	bpl.n	8002b70 <_vfiprintf_r+0x34>
 8002b6c:	692b      	ldr	r3, [r5, #16]
 8002b6e:	b99b      	cbnz	r3, 8002b98 <_vfiprintf_r+0x5c>
 8002b70:	4629      	mov	r1, r5
 8002b72:	4630      	mov	r0, r6
 8002b74:	f000 faca 	bl	800310c <__swsetup_r>
 8002b78:	b170      	cbz	r0, 8002b98 <_vfiprintf_r+0x5c>
 8002b7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b7c:	07dc      	lsls	r4, r3, #31
 8002b7e:	d504      	bpl.n	8002b8a <_vfiprintf_r+0x4e>
 8002b80:	f04f 30ff 	mov.w	r0, #4294967295
 8002b84:	b01d      	add	sp, #116	; 0x74
 8002b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b8a:	89ab      	ldrh	r3, [r5, #12]
 8002b8c:	0598      	lsls	r0, r3, #22
 8002b8e:	d4f7      	bmi.n	8002b80 <_vfiprintf_r+0x44>
 8002b90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b92:	f7ff fdb4 	bl	80026fe <__retarget_lock_release_recursive>
 8002b96:	e7f3      	b.n	8002b80 <_vfiprintf_r+0x44>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8002b9c:	2320      	movs	r3, #32
 8002b9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ba2:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ba6:	2330      	movs	r3, #48	; 0x30
 8002ba8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002d5c <_vfiprintf_r+0x220>
 8002bac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002bb0:	f04f 0901 	mov.w	r9, #1
 8002bb4:	4623      	mov	r3, r4
 8002bb6:	469a      	mov	sl, r3
 8002bb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002bbc:	b10a      	cbz	r2, 8002bc2 <_vfiprintf_r+0x86>
 8002bbe:	2a25      	cmp	r2, #37	; 0x25
 8002bc0:	d1f9      	bne.n	8002bb6 <_vfiprintf_r+0x7a>
 8002bc2:	ebba 0b04 	subs.w	fp, sl, r4
 8002bc6:	d00b      	beq.n	8002be0 <_vfiprintf_r+0xa4>
 8002bc8:	465b      	mov	r3, fp
 8002bca:	4622      	mov	r2, r4
 8002bcc:	4629      	mov	r1, r5
 8002bce:	4630      	mov	r0, r6
 8002bd0:	f7ff ffa2 	bl	8002b18 <__sfputs_r>
 8002bd4:	3001      	adds	r0, #1
 8002bd6:	f000 80a9 	beq.w	8002d2c <_vfiprintf_r+0x1f0>
 8002bda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002bdc:	445a      	add	r2, fp
 8002bde:	9209      	str	r2, [sp, #36]	; 0x24
 8002be0:	f89a 3000 	ldrb.w	r3, [sl]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 80a1 	beq.w	8002d2c <_vfiprintf_r+0x1f0>
 8002bea:	2300      	movs	r3, #0
 8002bec:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002bf4:	f10a 0a01 	add.w	sl, sl, #1
 8002bf8:	9304      	str	r3, [sp, #16]
 8002bfa:	9307      	str	r3, [sp, #28]
 8002bfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c00:	931a      	str	r3, [sp, #104]	; 0x68
 8002c02:	4654      	mov	r4, sl
 8002c04:	2205      	movs	r2, #5
 8002c06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c0a:	4854      	ldr	r0, [pc, #336]	; (8002d5c <_vfiprintf_r+0x220>)
 8002c0c:	f7fd fb00 	bl	8000210 <memchr>
 8002c10:	9a04      	ldr	r2, [sp, #16]
 8002c12:	b9d8      	cbnz	r0, 8002c4c <_vfiprintf_r+0x110>
 8002c14:	06d1      	lsls	r1, r2, #27
 8002c16:	bf44      	itt	mi
 8002c18:	2320      	movmi	r3, #32
 8002c1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c1e:	0713      	lsls	r3, r2, #28
 8002c20:	bf44      	itt	mi
 8002c22:	232b      	movmi	r3, #43	; 0x2b
 8002c24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c28:	f89a 3000 	ldrb.w	r3, [sl]
 8002c2c:	2b2a      	cmp	r3, #42	; 0x2a
 8002c2e:	d015      	beq.n	8002c5c <_vfiprintf_r+0x120>
 8002c30:	9a07      	ldr	r2, [sp, #28]
 8002c32:	4654      	mov	r4, sl
 8002c34:	2000      	movs	r0, #0
 8002c36:	f04f 0c0a 	mov.w	ip, #10
 8002c3a:	4621      	mov	r1, r4
 8002c3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c40:	3b30      	subs	r3, #48	; 0x30
 8002c42:	2b09      	cmp	r3, #9
 8002c44:	d94d      	bls.n	8002ce2 <_vfiprintf_r+0x1a6>
 8002c46:	b1b0      	cbz	r0, 8002c76 <_vfiprintf_r+0x13a>
 8002c48:	9207      	str	r2, [sp, #28]
 8002c4a:	e014      	b.n	8002c76 <_vfiprintf_r+0x13a>
 8002c4c:	eba0 0308 	sub.w	r3, r0, r8
 8002c50:	fa09 f303 	lsl.w	r3, r9, r3
 8002c54:	4313      	orrs	r3, r2
 8002c56:	9304      	str	r3, [sp, #16]
 8002c58:	46a2      	mov	sl, r4
 8002c5a:	e7d2      	b.n	8002c02 <_vfiprintf_r+0xc6>
 8002c5c:	9b03      	ldr	r3, [sp, #12]
 8002c5e:	1d19      	adds	r1, r3, #4
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	9103      	str	r1, [sp, #12]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	bfbb      	ittet	lt
 8002c68:	425b      	neglt	r3, r3
 8002c6a:	f042 0202 	orrlt.w	r2, r2, #2
 8002c6e:	9307      	strge	r3, [sp, #28]
 8002c70:	9307      	strlt	r3, [sp, #28]
 8002c72:	bfb8      	it	lt
 8002c74:	9204      	strlt	r2, [sp, #16]
 8002c76:	7823      	ldrb	r3, [r4, #0]
 8002c78:	2b2e      	cmp	r3, #46	; 0x2e
 8002c7a:	d10c      	bne.n	8002c96 <_vfiprintf_r+0x15a>
 8002c7c:	7863      	ldrb	r3, [r4, #1]
 8002c7e:	2b2a      	cmp	r3, #42	; 0x2a
 8002c80:	d134      	bne.n	8002cec <_vfiprintf_r+0x1b0>
 8002c82:	9b03      	ldr	r3, [sp, #12]
 8002c84:	1d1a      	adds	r2, r3, #4
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	9203      	str	r2, [sp, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	bfb8      	it	lt
 8002c8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002c92:	3402      	adds	r4, #2
 8002c94:	9305      	str	r3, [sp, #20]
 8002c96:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8002d6c <_vfiprintf_r+0x230>
 8002c9a:	7821      	ldrb	r1, [r4, #0]
 8002c9c:	2203      	movs	r2, #3
 8002c9e:	4650      	mov	r0, sl
 8002ca0:	f7fd fab6 	bl	8000210 <memchr>
 8002ca4:	b138      	cbz	r0, 8002cb6 <_vfiprintf_r+0x17a>
 8002ca6:	9b04      	ldr	r3, [sp, #16]
 8002ca8:	eba0 000a 	sub.w	r0, r0, sl
 8002cac:	2240      	movs	r2, #64	; 0x40
 8002cae:	4082      	lsls	r2, r0
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	3401      	adds	r4, #1
 8002cb4:	9304      	str	r3, [sp, #16]
 8002cb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cba:	4829      	ldr	r0, [pc, #164]	; (8002d60 <_vfiprintf_r+0x224>)
 8002cbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002cc0:	2206      	movs	r2, #6
 8002cc2:	f7fd faa5 	bl	8000210 <memchr>
 8002cc6:	2800      	cmp	r0, #0
 8002cc8:	d03f      	beq.n	8002d4a <_vfiprintf_r+0x20e>
 8002cca:	4b26      	ldr	r3, [pc, #152]	; (8002d64 <_vfiprintf_r+0x228>)
 8002ccc:	bb1b      	cbnz	r3, 8002d16 <_vfiprintf_r+0x1da>
 8002cce:	9b03      	ldr	r3, [sp, #12]
 8002cd0:	3307      	adds	r3, #7
 8002cd2:	f023 0307 	bic.w	r3, r3, #7
 8002cd6:	3308      	adds	r3, #8
 8002cd8:	9303      	str	r3, [sp, #12]
 8002cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cdc:	443b      	add	r3, r7
 8002cde:	9309      	str	r3, [sp, #36]	; 0x24
 8002ce0:	e768      	b.n	8002bb4 <_vfiprintf_r+0x78>
 8002ce2:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ce6:	460c      	mov	r4, r1
 8002ce8:	2001      	movs	r0, #1
 8002cea:	e7a6      	b.n	8002c3a <_vfiprintf_r+0xfe>
 8002cec:	2300      	movs	r3, #0
 8002cee:	3401      	adds	r4, #1
 8002cf0:	9305      	str	r3, [sp, #20]
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	f04f 0c0a 	mov.w	ip, #10
 8002cf8:	4620      	mov	r0, r4
 8002cfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002cfe:	3a30      	subs	r2, #48	; 0x30
 8002d00:	2a09      	cmp	r2, #9
 8002d02:	d903      	bls.n	8002d0c <_vfiprintf_r+0x1d0>
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0c6      	beq.n	8002c96 <_vfiprintf_r+0x15a>
 8002d08:	9105      	str	r1, [sp, #20]
 8002d0a:	e7c4      	b.n	8002c96 <_vfiprintf_r+0x15a>
 8002d0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d10:	4604      	mov	r4, r0
 8002d12:	2301      	movs	r3, #1
 8002d14:	e7f0      	b.n	8002cf8 <_vfiprintf_r+0x1bc>
 8002d16:	ab03      	add	r3, sp, #12
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	462a      	mov	r2, r5
 8002d1c:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <_vfiprintf_r+0x22c>)
 8002d1e:	a904      	add	r1, sp, #16
 8002d20:	4630      	mov	r0, r6
 8002d22:	f3af 8000 	nop.w
 8002d26:	4607      	mov	r7, r0
 8002d28:	1c78      	adds	r0, r7, #1
 8002d2a:	d1d6      	bne.n	8002cda <_vfiprintf_r+0x19e>
 8002d2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d2e:	07d9      	lsls	r1, r3, #31
 8002d30:	d405      	bmi.n	8002d3e <_vfiprintf_r+0x202>
 8002d32:	89ab      	ldrh	r3, [r5, #12]
 8002d34:	059a      	lsls	r2, r3, #22
 8002d36:	d402      	bmi.n	8002d3e <_vfiprintf_r+0x202>
 8002d38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d3a:	f7ff fce0 	bl	80026fe <__retarget_lock_release_recursive>
 8002d3e:	89ab      	ldrh	r3, [r5, #12]
 8002d40:	065b      	lsls	r3, r3, #25
 8002d42:	f53f af1d 	bmi.w	8002b80 <_vfiprintf_r+0x44>
 8002d46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d48:	e71c      	b.n	8002b84 <_vfiprintf_r+0x48>
 8002d4a:	ab03      	add	r3, sp, #12
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	462a      	mov	r2, r5
 8002d50:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <_vfiprintf_r+0x22c>)
 8002d52:	a904      	add	r1, sp, #16
 8002d54:	4630      	mov	r0, r6
 8002d56:	f000 f879 	bl	8002e4c <_printf_i>
 8002d5a:	e7e4      	b.n	8002d26 <_vfiprintf_r+0x1ea>
 8002d5c:	08003427 	.word	0x08003427
 8002d60:	08003431 	.word	0x08003431
 8002d64:	00000000 	.word	0x00000000
 8002d68:	08002b19 	.word	0x08002b19
 8002d6c:	0800342d 	.word	0x0800342d

08002d70 <_printf_common>:
 8002d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d74:	4616      	mov	r6, r2
 8002d76:	4699      	mov	r9, r3
 8002d78:	688a      	ldr	r2, [r1, #8]
 8002d7a:	690b      	ldr	r3, [r1, #16]
 8002d7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d80:	4293      	cmp	r3, r2
 8002d82:	bfb8      	it	lt
 8002d84:	4613      	movlt	r3, r2
 8002d86:	6033      	str	r3, [r6, #0]
 8002d88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002d8c:	4607      	mov	r7, r0
 8002d8e:	460c      	mov	r4, r1
 8002d90:	b10a      	cbz	r2, 8002d96 <_printf_common+0x26>
 8002d92:	3301      	adds	r3, #1
 8002d94:	6033      	str	r3, [r6, #0]
 8002d96:	6823      	ldr	r3, [r4, #0]
 8002d98:	0699      	lsls	r1, r3, #26
 8002d9a:	bf42      	ittt	mi
 8002d9c:	6833      	ldrmi	r3, [r6, #0]
 8002d9e:	3302      	addmi	r3, #2
 8002da0:	6033      	strmi	r3, [r6, #0]
 8002da2:	6825      	ldr	r5, [r4, #0]
 8002da4:	f015 0506 	ands.w	r5, r5, #6
 8002da8:	d106      	bne.n	8002db8 <_printf_common+0x48>
 8002daa:	f104 0a19 	add.w	sl, r4, #25
 8002dae:	68e3      	ldr	r3, [r4, #12]
 8002db0:	6832      	ldr	r2, [r6, #0]
 8002db2:	1a9b      	subs	r3, r3, r2
 8002db4:	42ab      	cmp	r3, r5
 8002db6:	dc26      	bgt.n	8002e06 <_printf_common+0x96>
 8002db8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002dbc:	1e13      	subs	r3, r2, #0
 8002dbe:	6822      	ldr	r2, [r4, #0]
 8002dc0:	bf18      	it	ne
 8002dc2:	2301      	movne	r3, #1
 8002dc4:	0692      	lsls	r2, r2, #26
 8002dc6:	d42b      	bmi.n	8002e20 <_printf_common+0xb0>
 8002dc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002dcc:	4649      	mov	r1, r9
 8002dce:	4638      	mov	r0, r7
 8002dd0:	47c0      	blx	r8
 8002dd2:	3001      	adds	r0, #1
 8002dd4:	d01e      	beq.n	8002e14 <_printf_common+0xa4>
 8002dd6:	6823      	ldr	r3, [r4, #0]
 8002dd8:	6922      	ldr	r2, [r4, #16]
 8002dda:	f003 0306 	and.w	r3, r3, #6
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	bf02      	ittt	eq
 8002de2:	68e5      	ldreq	r5, [r4, #12]
 8002de4:	6833      	ldreq	r3, [r6, #0]
 8002de6:	1aed      	subeq	r5, r5, r3
 8002de8:	68a3      	ldr	r3, [r4, #8]
 8002dea:	bf0c      	ite	eq
 8002dec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002df0:	2500      	movne	r5, #0
 8002df2:	4293      	cmp	r3, r2
 8002df4:	bfc4      	itt	gt
 8002df6:	1a9b      	subgt	r3, r3, r2
 8002df8:	18ed      	addgt	r5, r5, r3
 8002dfa:	2600      	movs	r6, #0
 8002dfc:	341a      	adds	r4, #26
 8002dfe:	42b5      	cmp	r5, r6
 8002e00:	d11a      	bne.n	8002e38 <_printf_common+0xc8>
 8002e02:	2000      	movs	r0, #0
 8002e04:	e008      	b.n	8002e18 <_printf_common+0xa8>
 8002e06:	2301      	movs	r3, #1
 8002e08:	4652      	mov	r2, sl
 8002e0a:	4649      	mov	r1, r9
 8002e0c:	4638      	mov	r0, r7
 8002e0e:	47c0      	blx	r8
 8002e10:	3001      	adds	r0, #1
 8002e12:	d103      	bne.n	8002e1c <_printf_common+0xac>
 8002e14:	f04f 30ff 	mov.w	r0, #4294967295
 8002e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e1c:	3501      	adds	r5, #1
 8002e1e:	e7c6      	b.n	8002dae <_printf_common+0x3e>
 8002e20:	18e1      	adds	r1, r4, r3
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	2030      	movs	r0, #48	; 0x30
 8002e26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e2a:	4422      	add	r2, r4
 8002e2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e34:	3302      	adds	r3, #2
 8002e36:	e7c7      	b.n	8002dc8 <_printf_common+0x58>
 8002e38:	2301      	movs	r3, #1
 8002e3a:	4622      	mov	r2, r4
 8002e3c:	4649      	mov	r1, r9
 8002e3e:	4638      	mov	r0, r7
 8002e40:	47c0      	blx	r8
 8002e42:	3001      	adds	r0, #1
 8002e44:	d0e6      	beq.n	8002e14 <_printf_common+0xa4>
 8002e46:	3601      	adds	r6, #1
 8002e48:	e7d9      	b.n	8002dfe <_printf_common+0x8e>
	...

08002e4c <_printf_i>:
 8002e4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e50:	7e0f      	ldrb	r7, [r1, #24]
 8002e52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002e54:	2f78      	cmp	r7, #120	; 0x78
 8002e56:	4691      	mov	r9, r2
 8002e58:	4680      	mov	r8, r0
 8002e5a:	460c      	mov	r4, r1
 8002e5c:	469a      	mov	sl, r3
 8002e5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002e62:	d807      	bhi.n	8002e74 <_printf_i+0x28>
 8002e64:	2f62      	cmp	r7, #98	; 0x62
 8002e66:	d80a      	bhi.n	8002e7e <_printf_i+0x32>
 8002e68:	2f00      	cmp	r7, #0
 8002e6a:	f000 80d4 	beq.w	8003016 <_printf_i+0x1ca>
 8002e6e:	2f58      	cmp	r7, #88	; 0x58
 8002e70:	f000 80c0 	beq.w	8002ff4 <_printf_i+0x1a8>
 8002e74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002e7c:	e03a      	b.n	8002ef4 <_printf_i+0xa8>
 8002e7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002e82:	2b15      	cmp	r3, #21
 8002e84:	d8f6      	bhi.n	8002e74 <_printf_i+0x28>
 8002e86:	a101      	add	r1, pc, #4	; (adr r1, 8002e8c <_printf_i+0x40>)
 8002e88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002e8c:	08002ee5 	.word	0x08002ee5
 8002e90:	08002ef9 	.word	0x08002ef9
 8002e94:	08002e75 	.word	0x08002e75
 8002e98:	08002e75 	.word	0x08002e75
 8002e9c:	08002e75 	.word	0x08002e75
 8002ea0:	08002e75 	.word	0x08002e75
 8002ea4:	08002ef9 	.word	0x08002ef9
 8002ea8:	08002e75 	.word	0x08002e75
 8002eac:	08002e75 	.word	0x08002e75
 8002eb0:	08002e75 	.word	0x08002e75
 8002eb4:	08002e75 	.word	0x08002e75
 8002eb8:	08002ffd 	.word	0x08002ffd
 8002ebc:	08002f25 	.word	0x08002f25
 8002ec0:	08002fb7 	.word	0x08002fb7
 8002ec4:	08002e75 	.word	0x08002e75
 8002ec8:	08002e75 	.word	0x08002e75
 8002ecc:	0800301f 	.word	0x0800301f
 8002ed0:	08002e75 	.word	0x08002e75
 8002ed4:	08002f25 	.word	0x08002f25
 8002ed8:	08002e75 	.word	0x08002e75
 8002edc:	08002e75 	.word	0x08002e75
 8002ee0:	08002fbf 	.word	0x08002fbf
 8002ee4:	682b      	ldr	r3, [r5, #0]
 8002ee6:	1d1a      	adds	r2, r3, #4
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	602a      	str	r2, [r5, #0]
 8002eec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ef0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e09f      	b.n	8003038 <_printf_i+0x1ec>
 8002ef8:	6820      	ldr	r0, [r4, #0]
 8002efa:	682b      	ldr	r3, [r5, #0]
 8002efc:	0607      	lsls	r7, r0, #24
 8002efe:	f103 0104 	add.w	r1, r3, #4
 8002f02:	6029      	str	r1, [r5, #0]
 8002f04:	d501      	bpl.n	8002f0a <_printf_i+0xbe>
 8002f06:	681e      	ldr	r6, [r3, #0]
 8002f08:	e003      	b.n	8002f12 <_printf_i+0xc6>
 8002f0a:	0646      	lsls	r6, r0, #25
 8002f0c:	d5fb      	bpl.n	8002f06 <_printf_i+0xba>
 8002f0e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002f12:	2e00      	cmp	r6, #0
 8002f14:	da03      	bge.n	8002f1e <_printf_i+0xd2>
 8002f16:	232d      	movs	r3, #45	; 0x2d
 8002f18:	4276      	negs	r6, r6
 8002f1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f1e:	485a      	ldr	r0, [pc, #360]	; (8003088 <_printf_i+0x23c>)
 8002f20:	230a      	movs	r3, #10
 8002f22:	e012      	b.n	8002f4a <_printf_i+0xfe>
 8002f24:	682b      	ldr	r3, [r5, #0]
 8002f26:	6820      	ldr	r0, [r4, #0]
 8002f28:	1d19      	adds	r1, r3, #4
 8002f2a:	6029      	str	r1, [r5, #0]
 8002f2c:	0605      	lsls	r5, r0, #24
 8002f2e:	d501      	bpl.n	8002f34 <_printf_i+0xe8>
 8002f30:	681e      	ldr	r6, [r3, #0]
 8002f32:	e002      	b.n	8002f3a <_printf_i+0xee>
 8002f34:	0641      	lsls	r1, r0, #25
 8002f36:	d5fb      	bpl.n	8002f30 <_printf_i+0xe4>
 8002f38:	881e      	ldrh	r6, [r3, #0]
 8002f3a:	4853      	ldr	r0, [pc, #332]	; (8003088 <_printf_i+0x23c>)
 8002f3c:	2f6f      	cmp	r7, #111	; 0x6f
 8002f3e:	bf0c      	ite	eq
 8002f40:	2308      	moveq	r3, #8
 8002f42:	230a      	movne	r3, #10
 8002f44:	2100      	movs	r1, #0
 8002f46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f4a:	6865      	ldr	r5, [r4, #4]
 8002f4c:	60a5      	str	r5, [r4, #8]
 8002f4e:	2d00      	cmp	r5, #0
 8002f50:	bfa2      	ittt	ge
 8002f52:	6821      	ldrge	r1, [r4, #0]
 8002f54:	f021 0104 	bicge.w	r1, r1, #4
 8002f58:	6021      	strge	r1, [r4, #0]
 8002f5a:	b90e      	cbnz	r6, 8002f60 <_printf_i+0x114>
 8002f5c:	2d00      	cmp	r5, #0
 8002f5e:	d04b      	beq.n	8002ff8 <_printf_i+0x1ac>
 8002f60:	4615      	mov	r5, r2
 8002f62:	fbb6 f1f3 	udiv	r1, r6, r3
 8002f66:	fb03 6711 	mls	r7, r3, r1, r6
 8002f6a:	5dc7      	ldrb	r7, [r0, r7]
 8002f6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002f70:	4637      	mov	r7, r6
 8002f72:	42bb      	cmp	r3, r7
 8002f74:	460e      	mov	r6, r1
 8002f76:	d9f4      	bls.n	8002f62 <_printf_i+0x116>
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	d10b      	bne.n	8002f94 <_printf_i+0x148>
 8002f7c:	6823      	ldr	r3, [r4, #0]
 8002f7e:	07de      	lsls	r6, r3, #31
 8002f80:	d508      	bpl.n	8002f94 <_printf_i+0x148>
 8002f82:	6923      	ldr	r3, [r4, #16]
 8002f84:	6861      	ldr	r1, [r4, #4]
 8002f86:	4299      	cmp	r1, r3
 8002f88:	bfde      	ittt	le
 8002f8a:	2330      	movle	r3, #48	; 0x30
 8002f8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002f90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002f94:	1b52      	subs	r2, r2, r5
 8002f96:	6122      	str	r2, [r4, #16]
 8002f98:	f8cd a000 	str.w	sl, [sp]
 8002f9c:	464b      	mov	r3, r9
 8002f9e:	aa03      	add	r2, sp, #12
 8002fa0:	4621      	mov	r1, r4
 8002fa2:	4640      	mov	r0, r8
 8002fa4:	f7ff fee4 	bl	8002d70 <_printf_common>
 8002fa8:	3001      	adds	r0, #1
 8002faa:	d14a      	bne.n	8003042 <_printf_i+0x1f6>
 8002fac:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb0:	b004      	add	sp, #16
 8002fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fb6:	6823      	ldr	r3, [r4, #0]
 8002fb8:	f043 0320 	orr.w	r3, r3, #32
 8002fbc:	6023      	str	r3, [r4, #0]
 8002fbe:	4833      	ldr	r0, [pc, #204]	; (800308c <_printf_i+0x240>)
 8002fc0:	2778      	movs	r7, #120	; 0x78
 8002fc2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002fc6:	6823      	ldr	r3, [r4, #0]
 8002fc8:	6829      	ldr	r1, [r5, #0]
 8002fca:	061f      	lsls	r7, r3, #24
 8002fcc:	f851 6b04 	ldr.w	r6, [r1], #4
 8002fd0:	d402      	bmi.n	8002fd8 <_printf_i+0x18c>
 8002fd2:	065f      	lsls	r7, r3, #25
 8002fd4:	bf48      	it	mi
 8002fd6:	b2b6      	uxthmi	r6, r6
 8002fd8:	07df      	lsls	r7, r3, #31
 8002fda:	bf48      	it	mi
 8002fdc:	f043 0320 	orrmi.w	r3, r3, #32
 8002fe0:	6029      	str	r1, [r5, #0]
 8002fe2:	bf48      	it	mi
 8002fe4:	6023      	strmi	r3, [r4, #0]
 8002fe6:	b91e      	cbnz	r6, 8002ff0 <_printf_i+0x1a4>
 8002fe8:	6823      	ldr	r3, [r4, #0]
 8002fea:	f023 0320 	bic.w	r3, r3, #32
 8002fee:	6023      	str	r3, [r4, #0]
 8002ff0:	2310      	movs	r3, #16
 8002ff2:	e7a7      	b.n	8002f44 <_printf_i+0xf8>
 8002ff4:	4824      	ldr	r0, [pc, #144]	; (8003088 <_printf_i+0x23c>)
 8002ff6:	e7e4      	b.n	8002fc2 <_printf_i+0x176>
 8002ff8:	4615      	mov	r5, r2
 8002ffa:	e7bd      	b.n	8002f78 <_printf_i+0x12c>
 8002ffc:	682b      	ldr	r3, [r5, #0]
 8002ffe:	6826      	ldr	r6, [r4, #0]
 8003000:	6961      	ldr	r1, [r4, #20]
 8003002:	1d18      	adds	r0, r3, #4
 8003004:	6028      	str	r0, [r5, #0]
 8003006:	0635      	lsls	r5, r6, #24
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	d501      	bpl.n	8003010 <_printf_i+0x1c4>
 800300c:	6019      	str	r1, [r3, #0]
 800300e:	e002      	b.n	8003016 <_printf_i+0x1ca>
 8003010:	0670      	lsls	r0, r6, #25
 8003012:	d5fb      	bpl.n	800300c <_printf_i+0x1c0>
 8003014:	8019      	strh	r1, [r3, #0]
 8003016:	2300      	movs	r3, #0
 8003018:	6123      	str	r3, [r4, #16]
 800301a:	4615      	mov	r5, r2
 800301c:	e7bc      	b.n	8002f98 <_printf_i+0x14c>
 800301e:	682b      	ldr	r3, [r5, #0]
 8003020:	1d1a      	adds	r2, r3, #4
 8003022:	602a      	str	r2, [r5, #0]
 8003024:	681d      	ldr	r5, [r3, #0]
 8003026:	6862      	ldr	r2, [r4, #4]
 8003028:	2100      	movs	r1, #0
 800302a:	4628      	mov	r0, r5
 800302c:	f7fd f8f0 	bl	8000210 <memchr>
 8003030:	b108      	cbz	r0, 8003036 <_printf_i+0x1ea>
 8003032:	1b40      	subs	r0, r0, r5
 8003034:	6060      	str	r0, [r4, #4]
 8003036:	6863      	ldr	r3, [r4, #4]
 8003038:	6123      	str	r3, [r4, #16]
 800303a:	2300      	movs	r3, #0
 800303c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003040:	e7aa      	b.n	8002f98 <_printf_i+0x14c>
 8003042:	6923      	ldr	r3, [r4, #16]
 8003044:	462a      	mov	r2, r5
 8003046:	4649      	mov	r1, r9
 8003048:	4640      	mov	r0, r8
 800304a:	47d0      	blx	sl
 800304c:	3001      	adds	r0, #1
 800304e:	d0ad      	beq.n	8002fac <_printf_i+0x160>
 8003050:	6823      	ldr	r3, [r4, #0]
 8003052:	079b      	lsls	r3, r3, #30
 8003054:	d413      	bmi.n	800307e <_printf_i+0x232>
 8003056:	68e0      	ldr	r0, [r4, #12]
 8003058:	9b03      	ldr	r3, [sp, #12]
 800305a:	4298      	cmp	r0, r3
 800305c:	bfb8      	it	lt
 800305e:	4618      	movlt	r0, r3
 8003060:	e7a6      	b.n	8002fb0 <_printf_i+0x164>
 8003062:	2301      	movs	r3, #1
 8003064:	4632      	mov	r2, r6
 8003066:	4649      	mov	r1, r9
 8003068:	4640      	mov	r0, r8
 800306a:	47d0      	blx	sl
 800306c:	3001      	adds	r0, #1
 800306e:	d09d      	beq.n	8002fac <_printf_i+0x160>
 8003070:	3501      	adds	r5, #1
 8003072:	68e3      	ldr	r3, [r4, #12]
 8003074:	9903      	ldr	r1, [sp, #12]
 8003076:	1a5b      	subs	r3, r3, r1
 8003078:	42ab      	cmp	r3, r5
 800307a:	dcf2      	bgt.n	8003062 <_printf_i+0x216>
 800307c:	e7eb      	b.n	8003056 <_printf_i+0x20a>
 800307e:	2500      	movs	r5, #0
 8003080:	f104 0619 	add.w	r6, r4, #25
 8003084:	e7f5      	b.n	8003072 <_printf_i+0x226>
 8003086:	bf00      	nop
 8003088:	08003438 	.word	0x08003438
 800308c:	08003449 	.word	0x08003449

08003090 <__swbuf_r>:
 8003090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003092:	460e      	mov	r6, r1
 8003094:	4614      	mov	r4, r2
 8003096:	4605      	mov	r5, r0
 8003098:	b118      	cbz	r0, 80030a2 <__swbuf_r+0x12>
 800309a:	6a03      	ldr	r3, [r0, #32]
 800309c:	b90b      	cbnz	r3, 80030a2 <__swbuf_r+0x12>
 800309e:	f7ff fa3b 	bl	8002518 <__sinit>
 80030a2:	69a3      	ldr	r3, [r4, #24]
 80030a4:	60a3      	str	r3, [r4, #8]
 80030a6:	89a3      	ldrh	r3, [r4, #12]
 80030a8:	071a      	lsls	r2, r3, #28
 80030aa:	d525      	bpl.n	80030f8 <__swbuf_r+0x68>
 80030ac:	6923      	ldr	r3, [r4, #16]
 80030ae:	b31b      	cbz	r3, 80030f8 <__swbuf_r+0x68>
 80030b0:	6823      	ldr	r3, [r4, #0]
 80030b2:	6922      	ldr	r2, [r4, #16]
 80030b4:	1a98      	subs	r0, r3, r2
 80030b6:	6963      	ldr	r3, [r4, #20]
 80030b8:	b2f6      	uxtb	r6, r6
 80030ba:	4283      	cmp	r3, r0
 80030bc:	4637      	mov	r7, r6
 80030be:	dc04      	bgt.n	80030ca <__swbuf_r+0x3a>
 80030c0:	4621      	mov	r1, r4
 80030c2:	4628      	mov	r0, r5
 80030c4:	f7ff fcc0 	bl	8002a48 <_fflush_r>
 80030c8:	b9e0      	cbnz	r0, 8003104 <__swbuf_r+0x74>
 80030ca:	68a3      	ldr	r3, [r4, #8]
 80030cc:	3b01      	subs	r3, #1
 80030ce:	60a3      	str	r3, [r4, #8]
 80030d0:	6823      	ldr	r3, [r4, #0]
 80030d2:	1c5a      	adds	r2, r3, #1
 80030d4:	6022      	str	r2, [r4, #0]
 80030d6:	701e      	strb	r6, [r3, #0]
 80030d8:	6962      	ldr	r2, [r4, #20]
 80030da:	1c43      	adds	r3, r0, #1
 80030dc:	429a      	cmp	r2, r3
 80030de:	d004      	beq.n	80030ea <__swbuf_r+0x5a>
 80030e0:	89a3      	ldrh	r3, [r4, #12]
 80030e2:	07db      	lsls	r3, r3, #31
 80030e4:	d506      	bpl.n	80030f4 <__swbuf_r+0x64>
 80030e6:	2e0a      	cmp	r6, #10
 80030e8:	d104      	bne.n	80030f4 <__swbuf_r+0x64>
 80030ea:	4621      	mov	r1, r4
 80030ec:	4628      	mov	r0, r5
 80030ee:	f7ff fcab 	bl	8002a48 <_fflush_r>
 80030f2:	b938      	cbnz	r0, 8003104 <__swbuf_r+0x74>
 80030f4:	4638      	mov	r0, r7
 80030f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030f8:	4621      	mov	r1, r4
 80030fa:	4628      	mov	r0, r5
 80030fc:	f000 f806 	bl	800310c <__swsetup_r>
 8003100:	2800      	cmp	r0, #0
 8003102:	d0d5      	beq.n	80030b0 <__swbuf_r+0x20>
 8003104:	f04f 37ff 	mov.w	r7, #4294967295
 8003108:	e7f4      	b.n	80030f4 <__swbuf_r+0x64>
	...

0800310c <__swsetup_r>:
 800310c:	b538      	push	{r3, r4, r5, lr}
 800310e:	4b2a      	ldr	r3, [pc, #168]	; (80031b8 <__swsetup_r+0xac>)
 8003110:	4605      	mov	r5, r0
 8003112:	6818      	ldr	r0, [r3, #0]
 8003114:	460c      	mov	r4, r1
 8003116:	b118      	cbz	r0, 8003120 <__swsetup_r+0x14>
 8003118:	6a03      	ldr	r3, [r0, #32]
 800311a:	b90b      	cbnz	r3, 8003120 <__swsetup_r+0x14>
 800311c:	f7ff f9fc 	bl	8002518 <__sinit>
 8003120:	89a3      	ldrh	r3, [r4, #12]
 8003122:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003126:	0718      	lsls	r0, r3, #28
 8003128:	d422      	bmi.n	8003170 <__swsetup_r+0x64>
 800312a:	06d9      	lsls	r1, r3, #27
 800312c:	d407      	bmi.n	800313e <__swsetup_r+0x32>
 800312e:	2309      	movs	r3, #9
 8003130:	602b      	str	r3, [r5, #0]
 8003132:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003136:	81a3      	strh	r3, [r4, #12]
 8003138:	f04f 30ff 	mov.w	r0, #4294967295
 800313c:	e034      	b.n	80031a8 <__swsetup_r+0x9c>
 800313e:	0758      	lsls	r0, r3, #29
 8003140:	d512      	bpl.n	8003168 <__swsetup_r+0x5c>
 8003142:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003144:	b141      	cbz	r1, 8003158 <__swsetup_r+0x4c>
 8003146:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800314a:	4299      	cmp	r1, r3
 800314c:	d002      	beq.n	8003154 <__swsetup_r+0x48>
 800314e:	4628      	mov	r0, r5
 8003150:	f7ff faf4 	bl	800273c <_free_r>
 8003154:	2300      	movs	r3, #0
 8003156:	6363      	str	r3, [r4, #52]	; 0x34
 8003158:	89a3      	ldrh	r3, [r4, #12]
 800315a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800315e:	81a3      	strh	r3, [r4, #12]
 8003160:	2300      	movs	r3, #0
 8003162:	6063      	str	r3, [r4, #4]
 8003164:	6923      	ldr	r3, [r4, #16]
 8003166:	6023      	str	r3, [r4, #0]
 8003168:	89a3      	ldrh	r3, [r4, #12]
 800316a:	f043 0308 	orr.w	r3, r3, #8
 800316e:	81a3      	strh	r3, [r4, #12]
 8003170:	6923      	ldr	r3, [r4, #16]
 8003172:	b94b      	cbnz	r3, 8003188 <__swsetup_r+0x7c>
 8003174:	89a3      	ldrh	r3, [r4, #12]
 8003176:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800317a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800317e:	d003      	beq.n	8003188 <__swsetup_r+0x7c>
 8003180:	4621      	mov	r1, r4
 8003182:	4628      	mov	r0, r5
 8003184:	f000 f884 	bl	8003290 <__smakebuf_r>
 8003188:	89a0      	ldrh	r0, [r4, #12]
 800318a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800318e:	f010 0301 	ands.w	r3, r0, #1
 8003192:	d00a      	beq.n	80031aa <__swsetup_r+0x9e>
 8003194:	2300      	movs	r3, #0
 8003196:	60a3      	str	r3, [r4, #8]
 8003198:	6963      	ldr	r3, [r4, #20]
 800319a:	425b      	negs	r3, r3
 800319c:	61a3      	str	r3, [r4, #24]
 800319e:	6923      	ldr	r3, [r4, #16]
 80031a0:	b943      	cbnz	r3, 80031b4 <__swsetup_r+0xa8>
 80031a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80031a6:	d1c4      	bne.n	8003132 <__swsetup_r+0x26>
 80031a8:	bd38      	pop	{r3, r4, r5, pc}
 80031aa:	0781      	lsls	r1, r0, #30
 80031ac:	bf58      	it	pl
 80031ae:	6963      	ldrpl	r3, [r4, #20]
 80031b0:	60a3      	str	r3, [r4, #8]
 80031b2:	e7f4      	b.n	800319e <__swsetup_r+0x92>
 80031b4:	2000      	movs	r0, #0
 80031b6:	e7f7      	b.n	80031a8 <__swsetup_r+0x9c>
 80031b8:	20000064 	.word	0x20000064

080031bc <_raise_r>:
 80031bc:	291f      	cmp	r1, #31
 80031be:	b538      	push	{r3, r4, r5, lr}
 80031c0:	4604      	mov	r4, r0
 80031c2:	460d      	mov	r5, r1
 80031c4:	d904      	bls.n	80031d0 <_raise_r+0x14>
 80031c6:	2316      	movs	r3, #22
 80031c8:	6003      	str	r3, [r0, #0]
 80031ca:	f04f 30ff 	mov.w	r0, #4294967295
 80031ce:	bd38      	pop	{r3, r4, r5, pc}
 80031d0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80031d2:	b112      	cbz	r2, 80031da <_raise_r+0x1e>
 80031d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80031d8:	b94b      	cbnz	r3, 80031ee <_raise_r+0x32>
 80031da:	4620      	mov	r0, r4
 80031dc:	f000 f830 	bl	8003240 <_getpid_r>
 80031e0:	462a      	mov	r2, r5
 80031e2:	4601      	mov	r1, r0
 80031e4:	4620      	mov	r0, r4
 80031e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031ea:	f000 b817 	b.w	800321c <_kill_r>
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d00a      	beq.n	8003208 <_raise_r+0x4c>
 80031f2:	1c59      	adds	r1, r3, #1
 80031f4:	d103      	bne.n	80031fe <_raise_r+0x42>
 80031f6:	2316      	movs	r3, #22
 80031f8:	6003      	str	r3, [r0, #0]
 80031fa:	2001      	movs	r0, #1
 80031fc:	e7e7      	b.n	80031ce <_raise_r+0x12>
 80031fe:	2400      	movs	r4, #0
 8003200:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003204:	4628      	mov	r0, r5
 8003206:	4798      	blx	r3
 8003208:	2000      	movs	r0, #0
 800320a:	e7e0      	b.n	80031ce <_raise_r+0x12>

0800320c <raise>:
 800320c:	4b02      	ldr	r3, [pc, #8]	; (8003218 <raise+0xc>)
 800320e:	4601      	mov	r1, r0
 8003210:	6818      	ldr	r0, [r3, #0]
 8003212:	f7ff bfd3 	b.w	80031bc <_raise_r>
 8003216:	bf00      	nop
 8003218:	20000064 	.word	0x20000064

0800321c <_kill_r>:
 800321c:	b538      	push	{r3, r4, r5, lr}
 800321e:	4d07      	ldr	r5, [pc, #28]	; (800323c <_kill_r+0x20>)
 8003220:	2300      	movs	r3, #0
 8003222:	4604      	mov	r4, r0
 8003224:	4608      	mov	r0, r1
 8003226:	4611      	mov	r1, r2
 8003228:	602b      	str	r3, [r5, #0]
 800322a:	f7fd fc13 	bl	8000a54 <_kill>
 800322e:	1c43      	adds	r3, r0, #1
 8003230:	d102      	bne.n	8003238 <_kill_r+0x1c>
 8003232:	682b      	ldr	r3, [r5, #0]
 8003234:	b103      	cbz	r3, 8003238 <_kill_r+0x1c>
 8003236:	6023      	str	r3, [r4, #0]
 8003238:	bd38      	pop	{r3, r4, r5, pc}
 800323a:	bf00      	nop
 800323c:	2000020c 	.word	0x2000020c

08003240 <_getpid_r>:
 8003240:	f7fd bc00 	b.w	8000a44 <_getpid>

08003244 <__swhatbuf_r>:
 8003244:	b570      	push	{r4, r5, r6, lr}
 8003246:	460c      	mov	r4, r1
 8003248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800324c:	2900      	cmp	r1, #0
 800324e:	b096      	sub	sp, #88	; 0x58
 8003250:	4615      	mov	r5, r2
 8003252:	461e      	mov	r6, r3
 8003254:	da0d      	bge.n	8003272 <__swhatbuf_r+0x2e>
 8003256:	89a3      	ldrh	r3, [r4, #12]
 8003258:	f013 0f80 	tst.w	r3, #128	; 0x80
 800325c:	f04f 0100 	mov.w	r1, #0
 8003260:	bf0c      	ite	eq
 8003262:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003266:	2340      	movne	r3, #64	; 0x40
 8003268:	2000      	movs	r0, #0
 800326a:	6031      	str	r1, [r6, #0]
 800326c:	602b      	str	r3, [r5, #0]
 800326e:	b016      	add	sp, #88	; 0x58
 8003270:	bd70      	pop	{r4, r5, r6, pc}
 8003272:	466a      	mov	r2, sp
 8003274:	f000 f848 	bl	8003308 <_fstat_r>
 8003278:	2800      	cmp	r0, #0
 800327a:	dbec      	blt.n	8003256 <__swhatbuf_r+0x12>
 800327c:	9901      	ldr	r1, [sp, #4]
 800327e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003282:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003286:	4259      	negs	r1, r3
 8003288:	4159      	adcs	r1, r3
 800328a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800328e:	e7eb      	b.n	8003268 <__swhatbuf_r+0x24>

08003290 <__smakebuf_r>:
 8003290:	898b      	ldrh	r3, [r1, #12]
 8003292:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003294:	079d      	lsls	r5, r3, #30
 8003296:	4606      	mov	r6, r0
 8003298:	460c      	mov	r4, r1
 800329a:	d507      	bpl.n	80032ac <__smakebuf_r+0x1c>
 800329c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80032a0:	6023      	str	r3, [r4, #0]
 80032a2:	6123      	str	r3, [r4, #16]
 80032a4:	2301      	movs	r3, #1
 80032a6:	6163      	str	r3, [r4, #20]
 80032a8:	b002      	add	sp, #8
 80032aa:	bd70      	pop	{r4, r5, r6, pc}
 80032ac:	ab01      	add	r3, sp, #4
 80032ae:	466a      	mov	r2, sp
 80032b0:	f7ff ffc8 	bl	8003244 <__swhatbuf_r>
 80032b4:	9900      	ldr	r1, [sp, #0]
 80032b6:	4605      	mov	r5, r0
 80032b8:	4630      	mov	r0, r6
 80032ba:	f7ff fab3 	bl	8002824 <_malloc_r>
 80032be:	b948      	cbnz	r0, 80032d4 <__smakebuf_r+0x44>
 80032c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032c4:	059a      	lsls	r2, r3, #22
 80032c6:	d4ef      	bmi.n	80032a8 <__smakebuf_r+0x18>
 80032c8:	f023 0303 	bic.w	r3, r3, #3
 80032cc:	f043 0302 	orr.w	r3, r3, #2
 80032d0:	81a3      	strh	r3, [r4, #12]
 80032d2:	e7e3      	b.n	800329c <__smakebuf_r+0xc>
 80032d4:	89a3      	ldrh	r3, [r4, #12]
 80032d6:	6020      	str	r0, [r4, #0]
 80032d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032dc:	81a3      	strh	r3, [r4, #12]
 80032de:	9b00      	ldr	r3, [sp, #0]
 80032e0:	6163      	str	r3, [r4, #20]
 80032e2:	9b01      	ldr	r3, [sp, #4]
 80032e4:	6120      	str	r0, [r4, #16]
 80032e6:	b15b      	cbz	r3, 8003300 <__smakebuf_r+0x70>
 80032e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032ec:	4630      	mov	r0, r6
 80032ee:	f000 f81d 	bl	800332c <_isatty_r>
 80032f2:	b128      	cbz	r0, 8003300 <__smakebuf_r+0x70>
 80032f4:	89a3      	ldrh	r3, [r4, #12]
 80032f6:	f023 0303 	bic.w	r3, r3, #3
 80032fa:	f043 0301 	orr.w	r3, r3, #1
 80032fe:	81a3      	strh	r3, [r4, #12]
 8003300:	89a3      	ldrh	r3, [r4, #12]
 8003302:	431d      	orrs	r5, r3
 8003304:	81a5      	strh	r5, [r4, #12]
 8003306:	e7cf      	b.n	80032a8 <__smakebuf_r+0x18>

08003308 <_fstat_r>:
 8003308:	b538      	push	{r3, r4, r5, lr}
 800330a:	4d07      	ldr	r5, [pc, #28]	; (8003328 <_fstat_r+0x20>)
 800330c:	2300      	movs	r3, #0
 800330e:	4604      	mov	r4, r0
 8003310:	4608      	mov	r0, r1
 8003312:	4611      	mov	r1, r2
 8003314:	602b      	str	r3, [r5, #0]
 8003316:	f7fd fbfc 	bl	8000b12 <_fstat>
 800331a:	1c43      	adds	r3, r0, #1
 800331c:	d102      	bne.n	8003324 <_fstat_r+0x1c>
 800331e:	682b      	ldr	r3, [r5, #0]
 8003320:	b103      	cbz	r3, 8003324 <_fstat_r+0x1c>
 8003322:	6023      	str	r3, [r4, #0]
 8003324:	bd38      	pop	{r3, r4, r5, pc}
 8003326:	bf00      	nop
 8003328:	2000020c 	.word	0x2000020c

0800332c <_isatty_r>:
 800332c:	b538      	push	{r3, r4, r5, lr}
 800332e:	4d06      	ldr	r5, [pc, #24]	; (8003348 <_isatty_r+0x1c>)
 8003330:	2300      	movs	r3, #0
 8003332:	4604      	mov	r4, r0
 8003334:	4608      	mov	r0, r1
 8003336:	602b      	str	r3, [r5, #0]
 8003338:	f7fd fbfb 	bl	8000b32 <_isatty>
 800333c:	1c43      	adds	r3, r0, #1
 800333e:	d102      	bne.n	8003346 <_isatty_r+0x1a>
 8003340:	682b      	ldr	r3, [r5, #0]
 8003342:	b103      	cbz	r3, 8003346 <_isatty_r+0x1a>
 8003344:	6023      	str	r3, [r4, #0]
 8003346:	bd38      	pop	{r3, r4, r5, pc}
 8003348:	2000020c 	.word	0x2000020c

0800334c <_init>:
 800334c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334e:	bf00      	nop
 8003350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003352:	bc08      	pop	{r3}
 8003354:	469e      	mov	lr, r3
 8003356:	4770      	bx	lr

08003358 <_fini>:
 8003358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335a:	bf00      	nop
 800335c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800335e:	bc08      	pop	{r3}
 8003360:	469e      	mov	lr, r3
 8003362:	4770      	bx	lr
